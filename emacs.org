#+TITLE: Emacs Literate Configuration
#+AUTHOR: Matthew Edward Adams 
#+PROPERTY: header-args :tangle yes
#+STARTUP: indent
* Table of Contents :TOC_5_gh:
- [[#configuration][Configuration]]
  - [[#config-file-tweaks][Config File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#reload-configuation][Reload Configuation]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#garbage-collection][Garbage Collection]]
    - [[#byte-compilation][Byte Compilation]]
    - [[#directory-structure][Directory Structure]]
    - [[#package-management][Package Management]]
      - [[#package-settings][Package Settings]]
      - [[#use-package-settings][Use-Package Settings]]
      - [[#manually-set-load-path][Manually Set Load Path]]
      - [[#initialize-package-management][Initialize Package Management]]
  - [[#shortcuts-and-registers][Shortcuts and Registers]]
    - [[#registers][Registers]]
  - [[#personal-information][Personal Information]]
  - [[#accessibility][Accessibility]]
    - [[#hinting][Hinting]]
    - [[#eyebrowse][Eyebrowse]]
    - [[#hydra-configuration][Hydra Configuration]]
    - [[#windmove][Windmove]]
    - [[#ace-window][Ace Window]]
    - [[#zoom-window][Zoom Window]]
  - [[#navigation][Navigation]]
    - [[#dired][Dired]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
  - [[#global-defaults][Global Defaults]]
    - [[#better-defaults][Better Defaults]]
    - [[#core-editing][Core Editing]]
    - [[#clock][Clock]]
    - [[#content-protection-with-folding][Content Protection with Folding:]]
  - [[#fonts][Fonts]]
    - [[#font-locking][Font Locking]]
    - [[#default-fonts][Default Fonts]]
    - [[#font-switching][Font Switching]]
    - [[#font-sizing][Font Sizing]]
  - [[#themes][Themes]]
    - [[#themes-in-rotation][Themes in Rotation]]
      - [[#programming-themes][Programming Themes]]
      - [[#writing-themes][Writing Themes]]
      - [[#org-themes][Org Themes]]
    - [[#writing-environment][Writing Environment]]
    - [[#functions-to-switch-among-themes][Functions to Switch Among Themes]]
  - [[#org-mode-initialization][Org-Mode Initialization]]
    - [[#org-defaults][Org Defaults]]
    - [[#org-modules][Org Modules]]
  - [[#org-agenda][Org Agenda]]
    - [[#agenda-files][Agenda Files]]
    - [[#super-agenda][Super Agenda]]
    - [[#habits-org-habit][Habits (=org-habit=)]]
    - [[#custom-commands][Custom Commands]]
  - [[#org-tasks-and-states][Org Tasks and States]]
    - [[#fast-todo-selection][Fast Todo Selection]]
    - [[#state-triggers][State Triggers]]
  - [[#org-capture-and-refile][Org Capture and Refile]]
    - [[#capture-code-and-functions][Capture Code and Functions]]
    - [[#capture-templates][Capture Templates]]
    - [[#refile-behaviors][Refile Behaviors]]
    - [[#refile-targets][Refile Targets]]
    - [[#capture-sources][Capture Sources]]
      - [[#elfeed][Elfeed]]
      - [[#screenshots][Screenshots]]
      - [[#web-protocol][Web Protocol]]
    - [[#webtools][Webtools]]
    - [[#org-board][Org Board]]
  - [[#project-management][Project Management]]
    - [[#projectile][Projectile]]
    - [[#version-control][Version Control]]
      - [[#magit][Magit]]
      - [[#local-backups][Local Backups]]
  - [[#reference-management][Reference Management]]
    - [[#building-a-second-brain][Building a Second Brain]]
      - [[#comprehensive-note-search][Comprehensive Note Search]]
      - [[#org-roam][Org-Roam]]
      - [[#org-journal][Org-Journal]]
      - [[#org-download][Org-Download]]
    - [[#book-and-film-logging][Book and Film Logging]]
      - [[#comment][COMMENT]]
    - [[#article-management-and-notes][Article Management and Notes]]
  - [[#publishing-management][Publishing Management]]
    - [[#broken-links][Broken Links]]
    - [[#commonplace-book][Commonplace Book]]
    - [[#hosted-private-html][Hosted Private HTML]]
    - [[#blog-and-microblog][Blog and Microblog]]
  - [[#programming][Programming]]
    - [[#literate-programming][Literate Programming]]
    - [[#tabbing-spacing-and-expansion][Tabbing, Spacing, and Expansion]]
    - [[#autocompletion][Autocompletion]]
    - [[#babel][Babel]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#web-development][Web Development]]
    - [[#aggressive-indent][Aggressive Indent]]
  - [[#toc-org][Toc-org]]
  - [[#post-initialization][Post Initialization]]

* Configuration
:PROPERTIES:
:VISIBILITY: children
:ID:       079e06ac-5c7d-4b50-aafa-9ad7889ce0c0
:END:
** Config File Tweaks
:PROPERTIES:
:ID:       5f35a8e1-12cf-4d3b-8753-34cdfff75fd4
:END:

There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
:PROPERTIES:
:ID:       a49db780-29bc-4c16-8c52-8787035e2001
:END:

First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Reload Configuation
:PROPERTIES:
:ID:       2fd7e19a-7f34-41f8-8f46-763c844b3f69
:END:

Reload my configuration from inside of =org-mode= and assign custom function to =C-c r=.

#+BEGIN_SRC emacs-lisp
  (defun owl/config-reload ()
    "Reloads ~/.emacs.d/emacs.org at runtime."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))

  (global-set-key (kbd "C-c r") 'owl/config-reload)
#+END_SRC

*** Visibility Settings
:PROPERTIES:
:ID:       f09e7ffe-e683-4a04-a04f-05755e10ea58
:END:

Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show its direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
:PROPERTIES:
:ID:       be48627e-307a-48f4-b920-9b05295ae60b
:END:

Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_5_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 5 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.
** Emacs Initialization
:PROPERTIES:
:ID:       43cacb3d-d9f4-4ee4-962c-4505bfc892ce
:END:

*** Garbage Collection
:PROPERTIES:
:ID:       f1073c8a-e27a-4815-89ab-d9561ca468ab
:END:

I increase the ~gc-cons-threshold~ to a very high number to decrease the load and compile time.
I'll lower this value significantly after initialization has completed. I don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
	  gc-cons-percentage 0.6))
#+END_SRC

*** Byte Compilation
:PROPERTIES:
:ID:       6dcd1b63-c9c4-4617-b8a2-c78cf9354ef3
:END:

Disable certain byte compiler warnings to cut down on the noise. This can be removed
if I would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** Directory Structure

Set the directory where the Emacs configuration is installed.

#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory (file-truename "~/.emacs.d/"))
#+END_SRC

Customizations are unwanted in =init.el= (and in general), so accidental customizations are stored in =custom.el= under =./user=.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/user/custom.el")
#+END_SRC

The default ELPA package directory is =.emacs.d/elpa=. User-defined or non-listed packages should be situated in =./user= directory.

Custom themes should be stored in =./user/themes/=.

*** Package Management
:PROPERTIES:
:ID:       e1799ef7-1ca6-4296-9ddc-fe538996292d
:END:

**** Package Settings
:PROPERTIES:
:ID:       88f08654-9178-4fa0-a845-5e34121ca990
:END:

Set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on my behalf. Additionally I'm setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for me since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
	  package-user-dir "~/.emacs.d/elpa/"
	  package--init-file-ensured t
	  package-enable-at-startup t)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** Use-Package Settings
:PROPERTIES:
:ID:       9d1b21fd-942d-45c1-a605-da6f9a9f97ca
:END:

Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer nil
	use-package-verbose t)
#+END_SRC

**** Manually Set Load Path
:PROPERTIES:
:ID:       3661381b-b296-44e9-b135-6677346d5d7a
:END:

We're going to set the load path ourselves so that we don't have to call =package-initialize= at runtime and incur a large performance hit. This load-path will actually be faster than the one created by =package-initialize= because it appends the elpa packages to the end of the load path. Otherwise any time a builtin package was required it would have to search all of third party paths first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

**** Initialize Package Management
:PROPERTIES:
:ID:       81b4a117-0aee-4dae-bd62-29412cb53ae3
:END:

Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'. Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which we promptly install if it's missing. Finally we load =use-package= and tell it to always install any missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all of the package initialization during compilation so that when byte compiled, all of this time consuming code is skipped. This can be done because the result of byte compiling =use-package= statements results in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.2")

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
  (require 'bind-key) ; Needs to be here for :bind to work with byte-compiled emacs.el ... not sure why
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC

** Shortcuts and Registers
*** Registers

- "Emacs registers are compartments where you can save text, rectangles, positions, and other things for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times."
- To visit the file whose name is in register /r/, type ~C-x r j~ /r/.

#+BEGIN_SRC emacs-lisp
  (set-register ?c (cons 'file "~/org/notebooks/cpb.org"))
  (set-register ?e (cons 'file "~/.emacs.d/emacs.org"))
  (set-register ?h (cons 'file "~/org/hub/."))
  (set-register ?i (cons 'file "~/org/hub/inbox.org"))
  (set-register ?p (cons 'file "~/projects/."))
  (set-register ?r (cons 'file "~/org/records/."))
  (set-register ?s (cons 'file "~/org/hub/systems.org"))
  (set-register ?t (cons 'file "~/projects/teaching/."))
  (set-register ?f (cons 'file "~/org/notebooks/fitness.org"))
  (set-register ?n (cons 'file "~/org/notebooks/."))
#+END_SRC

** Personal Information
:PROPERTIES:
:ID:       5ffcf544-6fe1-4910-96bd-761e780a8a59
:END:

Some basic values:

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Matthew Edward Adams"
        user-mail-address "m2eadams@gmail.com")
#+END_SRC

** Accessibility
*** Hinting

To remember all custom functions I create (=owl/NAME=), the following function will help format a simple table:

#+BEGIN_SRC emacs-lisp
  (defun owl/remember-all-custom-functions ()
    "Function to format a simple table with all custom functions that I created."
    (let* ((custom-list (apropos-internal "^owl/"))
	   (func-list (seq-filter 'functionp custom-list))
	   (docs (mapcar 'documentation func-list))
	   (docs-nnil (mapcar #'(lambda (el) (if el el "There isn't docstrings to this function! Shame!")) docs))
	   (docs-fmt (mapcar #'(lambda (el) (string-join (split-string el "\n") " ")) docs-nnil))
	   (res '()))
      (dotimes (index (length func-list))
	(push `(,(nth index func-list) ,(nth index docs-fmt)) res))
      res))
#+END_SRC

The [[https://github.com/Wilfred/helpful][helpful]] package provides better contextual information:

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  ("C-h f" . helpful-function)
  ("C-h x" . helpful-command)
  ("C-h z" . helpful-macro))
#+END_SRC

*** Eyebrowse

From [[https://github.com/wasamasa/eyebrowse][Wasamasa's Eyebrowse Quick Tutorial]]:

#+BEGIN_QUOTE
- You start with your current window config on slot 1. Once you hit ~C-c C-w 2~, you will see the modeline indicator appearing and showing slot 1 and 2 with slot 2 slightly emphasized. Slot 1 has been saved automatically for you and contains your last window config. Do something meaningful like a window split, then hit ~C-c C-w 1~. The window config on slot 2 is saved and the window config from slot 1 is loaded. Try switching back and forth between them with ~C-c C-w '~ to get a feeling for how subsequent window manipulations are handled.

- To make keeping track of workspaces easier, a tagging feature was added. Use ~C-c C-w ,~ to set a tag for the current window config, it will both appear in the modeline indicator and when using ~M-x eyebrowse-switch-to-window-config~. Setting the tag to an empty value will undo this change.

- Key bindings

The default key bindings are:

| Key bind 	  | Function                         |
|--------------+----------------------------------|
| ~C-c C-w <~ 	 | Switch to previous window config |
| ~C-c C-w >~ 	 | Switch to next window config     |
| ~C-c C-w '~ 	 | Switch to last window config     |
| ~C-c C-w "~ 	 | Close current window config      |
| ~C-c C-w ,~ 	 | Rename current window config     |
| ~C-c C-w 0~ 	 | Switch to window config 0        |
| ~C-c C-w 9~ 	 | Switch to window config 9        |
#+END_QUOTE


#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse)
#+END_SRC

*** Hydra Configuration

:PROPERTIES:
:ID:       5a53dcce-6315-4e2d-958f-1301c2bfdeea
:END:

Hydra allows me to display a list of all the commands implemented in the echo area and easily interact with them.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :init
    (setq hydra-is-helpful t)
    :config
    (require 'hydra-ox))
#+END_SRC

*** Windmove
:PROPERTIES:
:ID:       34dcae52-d56a-4f96-98b6-0ff1642461d4
:END:

Allows for simple traversal of windows beyond the cumbersome ~C-c o~ method.

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :bind
    (("<f2> <right>" . windmove-right)
     ("<f2> <left>" . windmove-left)
     ("<f2> <up>" . windmove-up)
     ("<f2> <down>" . windmove-down)))
#+END_SRC

*** Ace Window
:PROPERTIES:
:ID:       2e496530-d155-4ddf-abd3-ed0120b76d56
:END:

See http://bnbeckwith.com/bnb-emacs/ for supercharged variant on ~C-x o~ traversal.

To keep things tidy, the function key ~<f2>~ is also associated with Ace Window commands.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :demand t
    :bind
    ("<f2> a" . ace-window)
    :config
    (setq aw-keys '(?j ?k ?l ?n ?m)
	  aw-leading-char-style 'path
	  aw-dispatch-always t
	  aw-dispatch-alist
	  '((?x aw-delete-window "Ace - Delete Window")
	    (?c aw-swap-window   "Ace - Swap window")
	    (?n aw-flip-window   "Ace - Flip window")
	    (?v aw-split-window-vert "Ace - Split Vert Window")
	    (?h aw-split-window-horz "Ace - Split Horz Window")
	    (?m delete-other-windows "Ace - Maximize Window")
	    (?b balance-windows)))

    (set-face-attribute 'aw-leading-char-face nil :height 2.0)
  )
#+END_SRC

Manipulate window size with a hydra.

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window-size (:color amaranth)
    "Window size"
    ("h" shrink-window-horizontally "shrink horizontal")
    ("j" shrink-window "shrink vertical")
    ("k" enlarge-window "enlarge vertical")
    ("l" enlarge-window-horizontally "enlarge horizontal")
    ("q" nil "quit"))
  (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
#+END_SRC

Transpose from horizontal to vertical frame.

#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame)
#+END_SRC

*** Zoom Window
:PROPERTIES:
:ID:       8aad8c86-7387-4565-89cf-eb7f79e4f7fd
:END:

Selectively "zooms" one window of a complex windows configuration.

#+BEGIN_SRC emacs-lisp
  (use-package zoom-window
    :bind ("C-x C-z" . zoom-window-zoom))
#+END_SRC

** Navigation
*** Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure org-plus-contrib
    :delight dired-mode "Dired"
    :preface
    (defun owl/dired-directories-first ()
      "Sort dired listing with directories first before adding marks."
      (save-excursion
        (let (buffer-read-only)
          (forward-line 2)
          (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
        (set-buffer-modified-p nil))))
#+END_SRC

*** Ivy
:PROPERTIES:
:ID:       0ed4dade-6383-48d7-afd6-56a566cf4115
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
          ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 10)
    (setq ivy-count-format "")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-ignore-order))))           ;; allow input not in order

  (use-package ivy-hydra)

#+END_SRC

*** Counsel
:PROPERTIES:
:ID:       205e2aef-0d9a-420a-adc3-27b21467e7c9
:END:

Counsel allows me to utilize ivy by replacing many built-in and common functions with richer versions.

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile)
  (use-package counsel
    :demand t)
#+END_SRC

*** Swiper
:PROPERTIES:
:ID:       1760b536-a071-42d4-bdb9-f6c4e445ad4d
:END:

Swiper is a searching utility with quick preview in minibuffer. I load it when =swiper= or =swiper-all= is called.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all))
#+END_SRC

** Global Defaults
*** Better Defaults

From [[https://github.com/technomancy/better-defaults][technomancy's better-defaults package]]:

- ~ido-mode~ allows many operations (like buffer switching and file navigation) to be enhanced with instant feedback among the completion choices. 
- The toolbar, menu bar, and scroll bar are all turned off.
- The ~uniquify~ library makes it so that when you visit two files with the same name in different directories, the buffer names have the directory name appended to them instead of the silly hello<2> names you get by default.
- The ~saveplace~ library saves the location of the point when you kill a buffer and returns to it next time you visit the associated file.
- A few key bindings are replaced with more powerful equivalents: ~M-/~ is ~hippie-expand~ instead of ~dabbrev-expand~, ~C-x C-b~ is ~ibuffer~ instead of ~list-buffers~, and ~C-s~ and ~C-r~ are swapped with regex-aware incremental search functions.
- ~show-paren-mode~ highlights the matching pair when the point is over parentheses.
- Under X, killing and yanking uses the X clipboard rather than just the primary selection.
- Apropos commands perform more extensive searches than default.
- Mouse yanking inserts at the point instead of the location of the click.
- Backups are stored inside ~user-emacs-directory~. (Usually ~~/.emacs.d~)
- ~M-z~ (formerly ~zap-to-char~) is replaced with the far more useful ~zap-up-to-char~.
- ~require-final-newline~ is set to avoid problems with crontabs, etc.
- Setting ~load-prefer-newer~ prevents stale elisp bytecode from shadowing more up-to-date source files.
- ~Ediff~ is set up to use the existing frame instead of creating a new one.
- ~indent-tabs-mode~ defaults to nil.

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults)
  (message "Loaded better-defaults package")
#+END_SRC

*** Core Editing

- The variable =truncate-lines= turns off wrapping. Long lines will show a continuation character in the right margin.
- To indicate the presence of empty lines at the end of a file, a marker is placed in the left fringe.
- I require final newlines globally.

#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t
                indicate-empty-lines t
                require-final-newline t)
#+END_SRC

*** Clock

Put a clock in the modeline.

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
  (setq display-time-24hr-format t)
#+END_SRC

*** Content Protection with Folding:

[[https://orgmode.org/org.html#Catching-invisible-edits][From the Org manual]]:

#+BEGIN_QUOTE
Sometimes you may inadvertently edit an invisible part of the buffer and be confused on what has been edited and how to undo the mistake. Setting org-catch-invisible-edits to non-nil helps preventing this. See the docstring of this option on how Org should catch invisible edits and process them.
#+END_QUOTE

The option ~org-catch-invisible-edits~ set to ~'smart~ is useful at the parts of an Org file where a collapsed heading shows three dots. When pressing backspace (either in front of or before), it will prevent deletion of content.

#+BEGIN_SRC emacs-lisp
  (setq-default org-catch-invisible-edits 'smart)
#+END_SRC

However, accidental deletion of a subtree wholesale is still possible.

At some point, git-tracking will need to handle this. [2020-05-07 Thu]

** Fonts
*** Font Locking

Font Lock mode is a minor mode, always local to a particular buffer, and each buffer's major made tells Font Lock mode which text to fontify (add faces to). A programming language, for instance, will have rules about fontifying syntactically relevant constructs like comments, strings, and function names (from [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][the GNU Emacs manual]]).

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

*** Default Fonts

The default fonts need to be installed at least for the relevant user under =~/.fonts=. I currently use the Input series of fonts.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Input Mono 11" ))
  (set-face-attribute 'default t :font "Input Mono 11" )
  (set-face-attribute 'variable-pitch nil :font "Input Serif 11")
  (set-face-attribute 'fixed-pitch nil :font "Input Mono 11")
  (add-hook 'text-mode-hook 'variable-pitch-mode)
#+END_SRC

*** Font Switching

Establish function to set font to variable width in current buffer:

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-variable ()
    "Set font to a variable width (proportional) fonts in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "Input Serif"))
    (buffer-face-mode))
#+END_SRC

Establish function to set font to fixed width in current buffer:

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-fixed ()
    "Sets a fixed width (monospace) font in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "Input Mono"))
    (buffer-face-mode))
#+END_SRC

Finally, establish a function to set font to a pretty writing font if Input Serif isn’t what I want. Currently, I’m using ET Book, inspired by Edward Tufte. This function works best in cases where I am not creating tables or doing coding, just hard-core prose.

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-writing ()
    "Set font to a variable width (proportional) fonts in current buffer when writing prose"
    (interactive)
    (setq buffer-face-mode-face '(:family "ETBembo"))
    (buffer-face-mode))
#+END_SRC

=Control-c + u + f/v/w= to change font type:

#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-c u f" . owl/buffer-face-mode-fixed)
             ("C-c u v" . owl/buffer-face-mode-variable)
             ("C-c u w" . owl/buffer-face-mode-writing))
#+END_SRC

*** Font Sizing

Individual hydras are written in the relevant place in the configuration.

I like a hydra to help me increase or decrease text scale in a given buffer:

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-zoom (global-map "<f6>")
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out") 
  ("r" (text-scale-set 0) "reset")
  ("0" (text-scale-set 0) :bind nil :exit t)
  ("1" (text-scale-set 0) nil :bind nil :exit t))
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
#+END_SRC

*** Themes in Rotation
**** Programming Themes

#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :custom
    ;; Resize titles (optional).
    (moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
    (moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
    (moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

    ;; Choose a color for mode-line.(Default: blue)
    (moe-theme-set-color 'cyan))
#+END_SRC

**** Writing Themes

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package poet-theme)
#+END_SRC

**** Org Themes

*** Writing Environment

#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode)
#+END_SRC

*** Functions to Switch Among Themes

#+BEGIN_SRC emacs-lisp
  (setq owl/themes '(leuven moe-dark))
  (setq owl/themes-index 0)
#+END_SRC

I then define a function to cycle through the index of themes and assign it to =<f12>= globally.

#+BEGIN_SRC emacs-lisp
  (defun owl/cycle-theme ()
    (interactive)
    (setq owl/themes-index (% (1+ owl/themes-index) (length owl/themes)))
    (owl/load-indexed-theme))

  (global-set-key (kbd "<f12>") 'owl/cycle-theme)
#+END_SRC

In order to prevent overlay, =owl/cycle-theme= depends on on two additional functions:

#+BEGIN_SRC emacs-lisp
  (defun owl/load-indexed-theme ()
    (owl/try-load-theme (nth owl/themes-index owl/themes)))

  (defun owl/try-load-theme (theme)
    (if (ignore-errors (load-theme theme :no-confirm))
	(mapcar #'disable-theme (remove theme custom-enabled-themes))
      (message "Unable to find theme file for ‘%s’" theme)))
#+END_SRC

** Org-Mode Initialization

I favor the newer version of Org-Mode over the built-in one(s).

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org)
#+END_SRC
 
*** Org Defaults

Establish some meaningful defaults for =org-mode=: 

- =org-confirm-babel-evaluate= :: Set to nil; no need to confirm =org-babel= evaluations of code.

#+BEGIN_QUOTE
When t, Org prompts the user for confirmation before executing each code block. When nil, Org executes code blocks without prompting the user for confirmation. When this option is set to a custom function, Org invokes the function with these two arguments: the source code language and the body of the code block. The custom function must return either a t or nil, which determines if the user is prompted. Each source code language can be handled separately through this function argument. 
#+END_QUOTE

- =org-confirm-elisp-link-function= :: No need to prompt me before executing an Emacs Lisp link
- =org-log-done= ::  
- =org-hide-emphasis-markers= :: Remove markup characters and display closer to output.
- =org-return-follows-link= :: Yes, please!

#+BEGIN_SRC emacs-lisp
  (setq-default org-confirm-babel-evaluate nil
                org-confirm-elisp-link-function nil
                org-enforce-todo-dependencies t
                org-log-done t
                org-hide-emphasis-markers t
                org-return-follows-link t)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

*** Org Modules

Org modules seem to be a bit like an internal extension system of self-contained libraries, with some modules comprising Org's core and others external to it. There are a number of Org extensions that are initialized as =org-modules=.
- The package/library/module =org-protocol= allows for capturing webpages and links while browsing and importing that into predefined capture templates.
- The module =org-inlinetask= allows for tasks to be inserted within outline structures without counting themselves as a heading of the structure /per se/. This is accomplished by making the task having $>15$ stars by default (something that can be changed globally or specific to a file).

Org-modules' individual behavior is established under their own headings below (if needed).

#+BEGIN_SRC emacs-lisp
  (setq org-modules (quote (org-bbdb
                            org-bibtex
                            org-crypt
                            org-gnus
                            org-id
                            org-habit
                            org-inlinetask
                            org-protocol)))
#+END_SRC

** Org Agenda

The ~org-plus-contrib~ repository allows ~org-agenda~ to be used with the ~use-package~ syntax. Currently, I set many Agenda features outside of this block, however.

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure org-plus-contrib)
#+END_SRC

I bind ~org-agenda~ to ~C-c a~:

#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-c a" . org-agenda))
#+END_SRC

*** Agenda Files

The following code sets the main "agenda" files.

Note that "projects" of various sorts, with their own ~TODO~ items, will not by default appear on the Org Agenda. Currently, this is by design: ~TODO~-cluttering is a well-known gripe against Org and GTD.

From a [[https://stackoverflow.com/questions/52051230/agenda-view-in-org-mode][Stack Overflow question]]:

#+BEGIN_QUOTE
A quick way to add the current file temporarily to org-agenda-files is C-c [ (which is bound to org-agenda-file-to-front and as its name implies, adds the current file to the front of the list). You can get rid of it with C-c ]
#+END_QUOTE

I use this method until a project "proves" that it should be added to the permanent list of agenda files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (apply 'append
                                (mapcar
                                 (lambda (directory)
                                   (directory-files-recursively
                                    directory org-agenda-file-regexp))
                                 '("~/org/hub/"
                                   "~/org/notebooks/"
                                   "~/.config/"
                                   "~/.emacs.d/"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-agenda-files (quote ("~/org/hub/"
                                 "~/org/notebooks/"
                                 "~/.emacs.d/")))
#+END_SRC

*** Super Agenda

#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :init
    (setq org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t
          org-agenda-include-deadlines t
          org-agenda-block-separator nil
          org-agenda-compact-blocks t
          org-agenda-start-day nil ;; i.e. today
          org-agenda-span 1
          org-agenda-start-on-weekday nil)
    (setq org-agenda-custom-commands
          '(("c" "Super view"
             ((agenda "" ((org-agenda-overriding-header "")
                          (org-super-agenda-groups
                           '((:name "Today"
                                    :time-grid t
                                    :date today
                                    :order 1)))))
              (alltodo "" ((org-agenda-overriding-header "")
                           (org-super-agenda-groups
                            '((:log t)
                              (:name "To refile"
                                     :file-path "notebooks-project/captures/refile.org")
                              (:name "Next to do"
                                     :todo "IN-PROGRESS"
                                     :order 1)
                              (:name "Important"
                                     :priority "A"
                                     :order 6)
                              (:name "Today's tasks"
                                     :file-path "notebooks/journal/")
                              (:name "Due Today"
                                     :deadline today
                                     :order 2)
                              (:name "Scheduled Soon"
                                     :scheduled future
                                     :order 8)
                              (:name "Overdue"
                                     :deadline past
                                     :order 7)
                              (:name "Meetings"
                                     :and (:todo "MEET" :scheduled future)
                                     :order 10)
                              (:discard (:not (:todo "TODO")))))))))))
    :config
    (org-super-agenda-mode))
#+END_SRC

*** Habits (=org-habit=)
:PROPERTIES:
:ID:       6bd97298-43c5-4bcb-ae63-6dfbbd1a93f0
:END:

Habit tracking via =org-habit= will show a graph in the agenda tracking progress and consistency for established habits. I think it's a good idea to keep the set of habits small and specific.

From [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaraon Bieber's org-mode setup]]:

#+BEGIN_QUOTE
To create a habit, you need two things:

1. A SCHEDULED tag with a repeat specification (like .+ or ++), and
2. A STYLE property set to the value habit.
#+END_QUOTE

I like my habit graph to show throughout the day even if I’ve already completed a habit, so I adjust =org-habit-show-all-today=:

#+BEGIN_SRC emacs-lisp
  (setq org-habit-show-all-today t)
#+END_SRC

*** Custom Commands

@home, @office, @travelling, @phone, @email, @errands

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-custom-commands
      '(("g" . "GTD contexts")
        ("go" "Office" tags-todo "@office")
        ("gc" "Computer" tags-todo "@computer")
        ("gp" "Phone" tags-todo "@phone")
        ("gh" "Home" tags-todo "@home")
        ("ge" "Errands" tags-todo "@errands")
        ("G" "GTD Block Agenda"
         ((tags-todo "@office")
          (tags-todo "@computer")
          (tags-todo "@phone")
          (tags-todo "@home")
          (tags-todo "@errands"))
         nil                      ;; i.e., no local settings
         ("/tmp/next-actions.html")) ;; exports block to this file with C-c a e

         ;; ..other commands here

        ))
#+END_SRC

** Org Tasks and States

My task keywords generally follow Bernt Hansen's [[http://doc.norang.ca/org-mode.html#TasksAndStates][set of tasks and state transitions]]. I like the simplicity of his insight that a "project" is simply a ~TODO~ with subtasks, and I like the ability to comment on /why/ I'm holding a task. The state transitions he implements are sensible as well.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)"  "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELED(c@/!)" "PHONE" "MEETING")
                (sequence "TOMERGE(m)" "TICKLER" "IDEA"))))
#+END_SRC

*** Fast Todo Selection

The ~fast-todo-selection~ setting allows selection of /any/ todo state via ~C-c C-t KEY~. The second setting allows simple changing of todo states (~Shift-Left~ or ~Shift-Right~) without having to change other information such as timestamps or notes.

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

*** State Triggers

Here I borrow wholesale from [[http://doc.norang.ca/org-mode.html#ToDoStateTriggers][Bernt Hansen's configuration]] (except for the spelling of =CANCEL(L)ED=). I mean, I'm not favorable to the American spelling, but whatever (cf. /cancellation/, though of course there is a distinction to be made between derivational and inflectional endings and their ability to trigger spelling changes).

The reason for this code is that I want to be better about task filtering in Agenda views.

#+BEGIN_QUOTE
 I have a few triggers that automatically assign tags to tasks based on state changes. If a task moves to ~CANCELLED~ state then it gets a ~CANCELLED~ tag. Moving a ~CANCELLED~ task back to ~TODO~ removes the ~CANCELLED~ tag. These are used for filtering tasks in agenda views which I'll talk about later.

The triggers break down to the following rules:

    Moving a task to ~CANCELLED~ adds a ~CANCELLED~ tag
    Moving a task to ~WAITING~ adds a ~WAITING~ tag
    Moving a task to ~HOLD~ adds ~WAITING~ and ~HOLD~ tags
    Moving a task to a done state removes ~WAITING~ and ~HOLD~ tags
    Moving a task to ~TODO~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags
    Moving a task to ~NEXT~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags
    Moving a task to ~DONE~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags

The tags are used to filter tasks in the agenda views conveniently.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELED" ("CANCELED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELED") ("HOLD")))))
#+END_SRC

** Org Capture and Refile

Org-mode capture templates allow for central implementations of the PARA/BASB concept, as envisioned by Tiago Forte.

*** Capture Code and Functions

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure nil
    :after org
    :bind (("C-c c" . org-capture)
           ("C-c w" . org-refile))
    :preface
    (defvar owl/org-basic-task-template
      "* TODO [#B] %^{Task} %^g\nSCHEDULED: %^t\n:PROPERTIES:\n:Created: %U\n:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n:END:"
      "Template for basic task.")

    (defvar owl/org-daybook-task-template
      "* TODO %^{Task} %^g\n%^T\n:PROPERTIES:\n:Created: %U\n:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n:END:"
      "Template for basic daybook task entry. No time indicator for time of entry; prompt for scheduled time/date.")

    (defvar owl/org-daybook-entry-template
      "* NOTE %(format-time-string org-journal-time-format)%^{Title} %^g\n:PROPERTIES:\n:Created: %U\n:END:\n%?"
      "Template for basic daybook journal entry.")

    (defvar owl/friday-reflection-template
      "* Friday Reflection"
      "Template for Friday reflection."
      )

    (defvar owl/org-contacts-template "* %(org-contacts-template-name)
                                :PROPERTIES:
                                :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
                                :BIRTHDAY: %^{yyyy-mm-dd}
                                :EMAIL: %(org-contacts-template-email)
                                :NOTE: %^{NOTE}
                                :END:" "Template for org-contacts.")

    (defun owl/org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min))))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun owl/org-call-src-block (name)
    ;; Based on <http://kitchingroup.cheme.cmu.edu/blog/2014/08/11/Using-org-mode-outside-of-Emacs-sort-of/>
    ;; This works better than the org-sbe (aka sbe) macro, because it
    ;; calls the block upon expansion, making it difficult to bind to
    ;; a command to run later
    ;; TODO: Use `org-babel-goto-named-src-block'!  I guess it's new...or not, it's from 2010!
    (org-with-wide-buffer
     (-when-let (src (org-element-map (org-element-parse-buffer) 'src-block
                       (lambda (element)
                         (when (string= name (org-element-property :name element))
                           element))
                       nil ;info
                       t ))
       (goto-char (org-element-property :begin src))
       (let ((org-confirm-babel-evaluate nil))
         (org-babel-execute-src-block)))))
#+END_SRC

*** Capture Templates

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates `(("t"
                                 "basic task entry"
                                 entry
                                 (file+olp+datetree "~/org/hub/inbox.org"),
                                 owl/org-basic-task-template)
                                 ("j"
                                 "journal entry"
                                 entry
                                 (file+olp+datetree "~/org/notebooks/cpb.org")
                                 "* Event: %?\n\n  %i\n\n  From: %a"
                                 :empty-lines 1)
                                ("l"
                                 "logging")
                                ("lb"
                                 "book, manual entry"
                                 entry
                                 (file "~/org/notebooks/log.org")
                                 "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{AUTHOR}p\n%?"
                                 :empty-lines 1)
                                ("lf"
                                 "film, manual entry"
                                 entry
                                 (file "~/org/notebooks/log.org")
                                 "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{DIRECTOR}p\n%?"
                                 :empty-lines 1)
                                ("p"
                                 "protocol"
                                 entry
                                 (file+olp+datetree "~/org/notebooks/notes/temp.org"),
                                 "* TOMERGE %?[[%:link][%:description]] %U\n%i\n" 
                                 :prepend t)
                                ("s"
                                 "selected protocol"
                                 entry
                                 (file+olp+datetree "~/org/notebooks/notes/temp.org"),
                                 "* %^{Title}\nSource: [[%:link][%:description]]\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE")))
#+END_SRC

*** Refile Behaviors

I like =org-refile= to be promiscuous: it should use outline paths, complete in steps, and allow for the creation of parent nodes on-the-fly. See See https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html for details on some of the hacks here.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  ;; Allow on-the-fly creation of parent headings
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

*** Refile Targets

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
#+END_SRC

The package [[https://github.com/mwfogleman/org-randomnote][org-randomnote]], created by [[https://github.com/mwfogleman][Tasshin Fogleman]], further implements P.A.R.A. workflow by mimicking the “Random Note” functionality advocated by Tiago Forte with Evernote.

It can be used to “revisit nearly-forgotten but potentially-useful notes, or to spark creative insights by bringing older subjects into mind with new subjects.”

Currently, I bind it to =C-c g= and focus only on the =captures.org= file and several other well-stocked files. There is additional code that can traverse entire directories. I might want to add this later.

#+BEGIN_SRC emacs-lisp
  (use-package org-randomnote
    :ensure t
    :bind ("C-c g" . org-randomnote)
    :config (setq org-randomnote-candidates '("~/org/hub/inbox.org"
                                              "~/org/hub/systems.org"
                                              "~/org/notebooks/journal.org"
                                              "~/org/notebooks//log.org"
                                              "~/org/notebooks/cpb.org")))
#+END_SRC

*** Capture Sources

**** Elfeed

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Load elfeed-org
  (require 'elfeed)
  (require 'elfeed-org)

  (bind-keys ("C-x w" . elfeed)) 

  ;; Initialize elfeed-org
  ;; This hooks up elfeed-org to read the configuration when elfeed
  ;; is started with =M-x elfeed=
  (elfeed-org)

  ;; Optionally specify a number of files containing elfeed
  ;; configuration. If not set then the location below is used.
  ;; Note: The customize interface is also supported.
  (setq rmh-elfeed-org-files (list "~/org/feeds/elfeed.org"))

  ;; Somewhere in your .emacs file
  ;; (setq elfeed-feeds
  ;;       '("http://nullprogram.com/feed/"
  ;;         "http://planet.emacsen.org/atom.xml"))
#+END_SRC

**** Screenshots

**** Web Protocol

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-protocol)
  (require 'org-roam-protocol)
#+END_SRC

*** Webtools

I use webtools to help facilitate some web capturing.

#+BEGIN_SRC emacs-lisp
  (use-package org-web-tools)
#+END_SRC

*** Org Board

#+BEGIN_SRC emacs-lisp
  (use-package org-board)
#+END_SRC

** Project Management
*** Projectile

Projectile is a quick and easy project management package.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :config
    (setq projectile-project-search-path '("~/projects/"))
    (setq projectile-require-project-root nil))
#+END_SRC

*** Version Control

**** Magit

Magit allows use of Git inside of Org-Mode. No more bumping out to a terminal.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :preface (message "Magit is available at byte-compile time. I am proof thereof.")
    :commands magit-get-top-dir
    :init (setq magit-completing-read-function 'ivy-completing-read)
    :bind (("<f5>" . magit-status)
           ("C-c v t" . magit-status)
           ("C-c f" . magit-grep)))

#+END_SRC

**** Local Backups

The following defaults allow for a saner backup system with Emacs files.

Server and long-term backups are handled via Syncthing/Nextcloud and other methods.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
        create-lockfiles nil
        backup-directory-alist '((".*" . "~/.emacs.d/user/.emacs-saves"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

** Reference Management
*** Building a Second Brain

**** Comprehensive Note Search

I use Deft.

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/Dropbox/org/"))
#+END_SRC

**** Org-Roam

I'm trying out [[https://github.com/jethrokuan/org-roam][org-roam]] as a way of organizing some of my notebooks. It's based on the Roam note-taking ecosystem, about which I know little. But this rudimentary implementation looks cool. [2020-02-13 Thu]

It's now on MELPA [2020-05-09 Sat].

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Dropbox/org/notebooks/")
    (org-roam-index-file "index.org")
    (org-roam-capture-templates
     '(("d" "default" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "notes/%<%Y%m%d%H%M%S>-${slug}"
        :head "#+title: ${title}\n"
        :unnarrowed t)
       ("t" "tags" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "tags/%<%Y%m%d%H%M%S>-${slug}"
        :head "#+title: ${title}\n#+roam_tags: tags"
        :unnarrowed t)
       ("e" "evergreens" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "evergreens/%<%Y%m%d%H%M%S>-${slug}"
        :head "#+title: ${title}\n#+roam_tags: evergeeens\n"
        :unnarrowed t)
       ("s" "seedlings" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "seedlings/%<%Y%m%d%H%M%S>-${slug}"
        :head "#+title: ${title}\n#+roam_tags: seedlings\n"
        :unnarrowed t)))
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n j" . org-roam-jump-to-index)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-roam-server
  :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-export-inline-images t
          org-roam-server-authenticate nil
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+END_SRC

**** Org-Journal

#+BEGIN_SRC emacs-lisp
  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
     (pcase org-journal-file-type
       (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
       (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
       (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
       (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))

  (setq org-journal-file-header 'org-journal-file-header-func)

  (use-package org-journal
    :defer t
    :after org
    :bind
    ("C-c n n" . org-journal-new-entry)
    :custom
    (org-journal-dir "~/org/notebooks/journal/")
    (org-journal-date-format "%A, %Y %B %d")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-file-type 'weekly)
    (org-journal-enable-agenda-integration t))


#+END_SRC

**** Org-Download

#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :after org
    :hook (dired-mode-hook . org-download-enable)
    :bind
    (:map org-mode-map
          (("s-Y" . org-download-screenshot)
           ("s-y" . org-download-yank)))
    :custom
    (org-download-image-dir "~/org/notebooks/static/img/"))
#+END_SRC

*** Book and Film Logging

Currently ([2019-11-10 Sun]) trying out [[https://github.com/lepisma/org-books][org-books]] as a simple logging system for books and films I've seen over the years. The idea is to have a /separate/ master list that catalogs when I watched something, along with basic information (author, director, etc.). It's separate from the ~cpb.org~ file that would possibly include notes about what I read or watched.

Unfortunately, it requires ~helm~, ~helm-org~, and ~enlive~, which I don't use elsewhere, so I've had to load them here. In addition, the package itself is not on MELPA, so I've had to use ~:load-path~ and point it to ~~/.emacs.d/user/packges/~. In the ideal case, I want to keep things simple without too many custom packages in this directory.

I use ISBN 13 (when available) and [[https://openlibrary.org/][OpenLibrary]] to track books and editions. I use [[https://eidr.org/][EIDR]] for cataloguing media.

#+BEGIN_SRC emacs-lisp
  (use-package org-books
    :load-path "~/.emacs.d/user/packages/org-books"
    :init (use-package helm)
    (use-package helm-org)
    (use-package enlive)
    :config (setq org-books-file "~/org/notebooks/log.org"))
#+END_SRC

**** COMMENT
In reality, this package isn't really needed ...

*** Article Management and Notes

#+BEGIN_SRC emacs-lisp
  (require 'ox-bibtex)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :commands turn-on-reftex
    :init
    (progn
      (setq reftex-default-bibliography '("~/org/bib/library.bib"))
      (setq reftex-plug-intoAUCTex t)))
#+END_SRC

Using [[https://github.com/jkitchin/org-ref][org-ref]], obvs.

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :after org
    :init
    (setq reftex-default-bibliography '("~/org/bib/library.bib"))
    (setq org-ref-default-bibliography '("~/org/bib/library.bib"))
    (setq org-ref-pdf-directory '("~/library/articles")))
#+END_SRC

** Publishing Management

*** Broken Links

For the love of Psyche, please publish even if there are broken links, Org!

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-broken-links t)
#+END_SRC

*** Commonplace Book
*** Hosted Private HTML
*** Blog and Microblog

** Programming
*** Literate Programming

Require Org ~src~ blocks to use the current window. Currently turned off.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** Tabbing, Spacing, and Expansion

Tab width of ~2~ is compact and readable:

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

When hitting return, go to the right-ish indendation on the next line, in general:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Autocompletion

Package =auto-complete= works very well for some IDE-like behaviors.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish auto-complete-mode)
#+END_SRC

*** Babel

I use =org-babel= to embed and process some code in my Org files. Here I initialize the set of languages I commonly and less-than-commonly rely on:

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)
                               (shell . t)
                               (python . t)
                               (gnuplot . t)))
#+END_SRC

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package eldoc
    :diminish eldoc-mode
    :commands turn-on-eldoc-mode
    :defer t
    :init
    (progn
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC

*** Web Development

For editing of Web documents (HTML, CSS), I use [[http://www.web-mode.org][web-mode]]:

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.html?\\'"
    :config
    (progn
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-ac-sources-alist
            '(("css" . (ac-source-css-property))
              ("html" . (ac-source-words-in-buffer ac-source-abbrev)))
            )))
#+END_SRC

*** Aggressive Indent

The package reindents code after every change, making it purportedly more reliable than =electric-indent-mode=.

Because I mainly use Lisp and Python, I want aggressive indenting to be specific to =emacs-lisp-mode= so I activate it via hook.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))
#+END_SRC
** Toc-org
 
Install and load the =toc-org= package after org mode is loaded. This is the package that automatically generates an up to date table of contents for us.

 #+BEGIN_SRC emacs-lisp
   (use-package toc-org
     :after org
     :init (add-hook 'org-mode-hook #'toc-org-enable))
 #+END_SRC

** Post Initialization

 Lower the GC thresholds back down to a sane level.

 #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold 16777216
	 gc-cons-percentage 0.1)
 #+END_SRC
