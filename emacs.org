#+TITLE: Emacs Literate Configuration
#+AUTHOR: Matthew Edward Adams 
#+PROPERTY: header-args :tangle yes
#+STARTUP: indent
* Table of Contents :TOC_5_gh:
- [[#about-this-file][About This File]]
- [[#design-concerns][Design Concerns]]
  - [[#why-a-literate-configuration][Why a Literate Configuration?]]
  - [[#must-haves][Must-Haves]]
  - [[#things-that-will-continue-to-be-built-out][Things That Will Continue to Be Built Out]]
  - [[#desirables][Desirables]]
  - [[#explanation-of-captures-cpb-daybook-hub][Explanation of Captures, CPB, Daybook, Hub]]
- [[#org-directory-structure][Org Directory Structure]]
- [[#configuration][Configuration]]
  - [[#config-file-tweaks][Config File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#reload-configuation][Reload Configuation]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#garbage-collection][Garbage Collection]]
    - [[#byte-compilation][Byte Compilation]]
    - [[#startup-behavior][Startup Behavior]]
    - [[#directory-structure][Directory Structure]]
    - [[#package-management][Package Management]]
      - [[#package-settings][Package Settings]]
      - [[#use-package-settings][Use-Package Settings]]
      - [[#manually-set-load-path][Manually Set Load Path]]
      - [[#initialize-package-management][Initialize Package Management]]
  - [[#global-defaults][Global Defaults]]
    - [[#aggressive-indent][Aggressive Indent]]
  - [[#fonts][Fonts]]
    - [[#font-locking][Font Locking]]
    - [[#default-fonts][Default Fonts]]
    - [[#font-switching][Font Switching]]
    - [[#font-sizing][Font Sizing]]
  - [[#themes][Themes]]
    - [[#themes-in-rotation][Themes in Rotation]]
      - [[#programming-themes][Programming Themes]]
        - [[#doom-themes][doom-themes]]
        - [[#flatui-dark-theme][flatui-dark-theme]]
        - [[#kaolin-themes][kaolin-themes]]
      - [[#writing-themes][Writing Themes]]
        - [[#poet-themes][poet-themes]]
      - [[#org-themes][Org Themes]]
        - [[#parchment-theme][parchment-theme]]
    - [[#functions-to-switch-among-themes][Functions to Switch Among Themes]]
  - [[#accessibility][Accessibility]]
    - [[#hinting][Hinting]]
    - [[#hydra-configuration][Hydra Configuration]]
    - [[#ace-window][Ace Window]]
    - [[#zoom-window][Zoom Window]]
  - [[#navigation][Navigation]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
  - [[#project-management][Project Management]]
    - [[#projectile][Projectile]]
    - [[#version-control][Version Control]]
      - [[#magit][Magit]]
      - [[#local-backups][Local Backups]]
  - [[#org-mode-initialization][Org-Mode Initialization]]
    - [[#org-defaults][Org Defaults]]
    - [[#org-modules][Org Modules]]
  - [[#org-agenda][Org Agenda]]
    - [[#agenda-files][Agenda Files]]
    - [[#][]]
    - [[#habits-org-habit][Habits (=org-habit=)]]
  - [[#tasks-and-states][Tasks and States]]
    - [[#fast-todo-selection][Fast Todo Selection]]
    - [[#state-triggers][State Triggers]]
  - [[#org-journal-as-task-daybook][Org Journal as Task Daybook]]
  - [[#clock][Clock]]
  - [[#org-capture-and-refile][Org Capture and Refile]]
    - [[#capture-code-org-capture][Capture Code (=org-capture=)]]
    - [[#capture-sources][Capture Sources]]
      - [[#elfeed][Elfeed]]
      - [[#screenshots][Screenshots]]
      - [[#web-protocol][Web Protocol]]
    - [[#refile-behaviors][Refile Behaviors]]
    - [[#refile-targets-integration-with-para][Refile Targets (Integration with P.A.R.A.)]]
  - [[#encryption][Encryption]]
  - [[#contacts-management][Contacts Management]]
  - [[#programming-languages-management][Programming Languages Management]]
    - [[#autocompletion][Autocompletion]]
    - [[#babel][Babel]]
  - [[#reference-and-resource-management][Reference and Resource Management]]
  - [[#publishing][Publishing]]
    - [[#commonplace-book][Commonplace Book]]
    - [[#hosted-private-html][Hosted Private HTML]]
    - [[#blog-and-microblog][Blog and Microblog]]
  - [[#writing-environment][Writing Environment]]
    - [[#distraction-free-writing][Distraction-Free Writing]]
  - [[#dashboard][Dashboard]]
  - [[#toc-org][Toc-org]]
  - [[#post-initialization][Post Initialization]]

* About This File

This is a rebuild and refactoring of my Emacs configuration using literate programming techniques.

All of my configuration is stored here (no requiring and providing of subfiles) at present.

It contains some optimization for byte-compiling to ensure a faster load time.

* Design Concerns

** Why a Literate Configuration?

Literate programming is human-centric in the sense that programming code is "tangled" with prose. Moreover, the "program" unfolds in a way that reflects human reasoning, not machine logic. I don't have a stake in whether I think literate programming is good (and I don't even really know where it stands among programmers and coders in 2018). In wanting my Emacs configuration to be configurable but not get out of hand, I have been trying different options over the years. The literate programming examples I've seen online have made a good case for something resembling "literate" programming as the basis for a dot Emacs configuration.

** Must-Haves

- A reliable and fast-loading configuration; a byte-compiled =init.elc= for even faster load time
- A writing-centric setup with a beautiful writing theme (=poet-theme=)
- A clear way of handling images that are associated with Org files
- A general philosophy of avoiding new packages; favor taking the relevant bits of code and pasting them into this configuraiton with literate explanations of what the code does
- A working, reliable, and consistent tagging, capture, and refiling system based on principles of Building a Second Brain, PARA, and other ideas from Tiago Forte
- A clear and consistent structure to my =~/org= directory that is recapitulated in my capture and refiling system
- A dashboard to replace =organizer.org= or to heavily supplement it
- Spellchecking, hydras, and other navigation tools that favor /writing/ and /editing/
- An =.emacs.d/= directory that properly files away user configuration and is not cluttered
- =init.el= and associated files that make sense, aren't overly complicated, and don't contain code I don't use
- A way to distinguish packages on MELPA, packages not there, and packages that are experimental, and a way to sandbox non-working packages
- A way to load a minimally working config that will always have my bare bones

*************** DONE Create working minimal config   :@digital:
*************** END
*************** TODO Decide on how to handle picture handling across Areas, Projects, and Resources :@digital:
*************** END
*************** DONE Make Projectile work better with Projects :@digital:
*************** END

** Things That Will Continue to Be Built Out

- A server and publishing system that allows for Wikis, notebooks, and web pages to be created from Org content
- Various ways of capturing online material and storing it in =resources/= for offline access (=org-download=, etc.)
- Good langauge and font support for German, Korean, and French when I want to type in and use those languages
- Non-linear, non-hierarchical tools like =org-brain= as ways to enhance the knowledge management system I am building

** Desirables
- Ledger ([[https://www.ledger-cli.org/][Ledger]]). Also possibly [[https://github.com/NicolasPetton/elbank][Elbank]].
- [[https://github.com/abo-abo/org-download][Org-download]]
- Possibly some code from [[https://github.com/rnkn/fountain-mode/][Founntain Mode]] (screenwriting)
- Check out [[https://www.gnu.org/software/emacs-muse/manual/muse.html][Muse]] alongside Org pubishing system. What are my needs?
- Possible integration of [[https://github.com/novoid/Memacs][Memacs]] someday. 

** Explanation of Captures, CPB, Daybook, Hub

The =captures= and =cpb= directories encapsulate [[https://medium.com/@tasshin/implementing-a-second-brain-in-emacs-and-org-mode-ef0e44fb7ca5][progressive summarization]], at least the first four layers:

- Layer 1 :: When you encounter something interesting, capture it
- Layer 2 :: Bold the most interesting parts
- Layer 3 :: Highlight the most interesting bolded sections
- Layer 4 :: Summarize the bolded portions and the note in your own words
- Layer 5 :: Turn your notes into something new: a tweet, a blog post, even a book

The Commonplace Book directory, or =cpb= direcotry, includes my journals and notebooks, all of which aim to have a Coleridgean flair. Captures pulls from the Web (using Firefox’s =org-capture= extension, primarily). Items not captured via this method can be entered manually with a capture template, or in certain cases can be put into =unfiled= for later assimilation.

The =daybook= allows for bullet-journal carryover of tasks and includes short notes about what I accomplished each day. The Agenda pulls heavily from the daybook. It is intended to be a serious commitment and is separate from, but can often influence or engage with, projects and notes.

The =hub= replaces several attempts at realzing “Areas” wtihin Tiago Forte’s P.A.R.A. framework. I’ve gone through highly articulated structures that list out all ongoing spheres of activity. Under the PARA rubric, areas are "[[https://medium.com/@tasshin/implementing-a-second-brain-in-emacs-and-org-mode-ef0e44fb7ca5][ongoing spheres of activity]]." They are /not/ projects, but projects often emerge from these areas. They are also /not/ resources, which are supposed to be "materials not tied to a specific project or area." My solution is create a large Areas-esque file, =systems.org=, that has subheadings devoted to Home, Digital, Transportation, etc., which are my ongoing spheres of activity. Headings within these areas can point to projects, instantiate recurring tasks, and so on. The =calendar.org= lists out yearly anniversaries I don’t want to forget, and =contacts.xxx= is a file that either will use =org-contacts= or revert to the powerful BBDB system. The final file =meta.org= has code that tracks tags throughout the =org= sytem.

The thought here is that these four directories directly interact with the Agenda in certain ways or represent hard concerns of P.A.R.A.-based workflow. I’ve moved a bit away from GTD, except for contextual tagging and ticklers (setting tasks way into the future to remind me of something I want to do).

Within my re-imagined home directory, the =library= sits /outside of/ the =org= directory proper, as it should. There are two reasons for this:

1. I am moving to a server framework in which the “library” in its entirety sits on a private server, and local computers check out relevant portions of the library.
2. The =org= directory is not synonymous with /all/ work I do or my /entire/ knowledge management system. The =org= directory reassumes real meaning with fewer files and more sensible subdirectories that directly reflect what I am doing with Org.

In addition, projects (including writing, blogging, coding, curriculum development) are housed outside of the =org= structure. If something project-wise ossifies enough, it should enter the library or library archives, and =cpb=-based work should have been tracking its development all along.

In this way, I’ve recapitulated the P.A.R.A. system (Projects - Areas (Hub) - Resources (Library) - Archives (Library Archives)) in a way that works for my workflow. I feel less burdened by having to update tons of files every day and can return to letting the Agenda tell me what needs to be done and where.

* Org Directory Structure

Currently I am trying the following structure for my Org-based workflow:

#+BEGIN_EXAMPLE
├── captures
│   ├── captures.org
│   └── m.screenshots
├── cpb
│   ├── digital.nb.org
│   ├── journal.org
│   ├── math.nb.org
│   └── reference.org
├── daybook
│   ├── 20190203
│   └── 20190204
└── hub
    ├── calendar.org
    ├── contacts.bbdb
    ├── meta.org
    └── systems.org
#+END_EXAMPLE

This structure represents about a year of thinking through task, workflow, and knowledge management systems. I don’t think it’s my final word, but it does reflect best where I want to lay my energies. I want things simple.

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:
** Config File Tweaks

There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle

First there is a property defined on the file:

#+begin_src :tangle no
header-args :tangle yes
#+end_src

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Reload Configuation

Reload my configuration from inside of =org-mode= and assign custom function to =C-c r=.

#+begin_src emacs-lisp
  (defun owl/config-reload ()
    "Reloads ~/.emacs.d/emacs.org at runtime."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))

  (global-set-key (kbd "C-c r") 'owl/config-reload)
#+end_src

*** Visibility Settings

Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show its direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents

Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_5_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 5 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.

** Personal Information

Some basic values:

#+begin_src emacs-lisp
  (setq user-full-name "Matthew Edward Adams"
        user-mail-address "m2eadams@gmail.com")
#+end_src

** Emacs Initialization

*** Garbage Collection

I increase the =gc-cons-threshold= to a very high number to decrease the load and compile time.
I'll lower this value significantly after initialization has completed. I don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
	  gc-cons-percentage 0.6))
#+end_src

*** Byte Compilation

Disable certain byte compiler warnings to cut down on the noise. This can be removed
if I would like to see any and all byte compiler warnings.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+end_src

*** Startup Behavior

When I startup, I want a minimal Emacs layout: no startup screen, no toolbar, no scrollbar, and no menubar.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+end_src

*** Directory Structure

Set the directory where the Emacs configuration is installed.

#+begin_src emacs-lisp
  (setq user-emacs-directory (file-truename "~/.emacs.d/"))
#+end_src

Customizations are unwanted in =init.el= (and in general), so accidental customizations are stored in =custom.el= under =./user=.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/user/custom.el")
#+end_src

The default ELPA package directory is =.emacs.d/elpa=. User-defined or non-listed packages should be situated in =./user= directory.

Custom themes should be stored in =./user/themes/=.

*** Package Management

**** Package Settings

Set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on my behalf. Additionally I'm setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for me since
=use-package= will be handling that.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
	  package-user-dir "~/.emacs.d/elpa/"
	  package--init-file-ensured t
	  package-enable-at-startup t)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+end_src

**** Use-Package Settings

Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+begin_src emacs-lisp
  (setq use-package-always-defer nil
	use-package-verbose t)
#+end_src

**** Manually Set Load Path

We're going to set the load path ourselves so that we don't have to call =package-initialize= at runtime and incur a large performance hit. This load-path will actually be faster than the one created by =package-initialize= because it appends the elpa packages to the end of the load path. Otherwise any time a builtin package was required it would have to search all of third party paths first.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+end_src

**** Initialize Package Management

Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'. Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which we promptly install if it's missing. Finally we load =use-package= and tell it to always install any missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all of the package initialization during compilation so that when byte compiled, all of this time consuming code is skipped. This can be done because the result of byte compiling =use-package= statements results in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been previously compiled manually then all of the package initialization will still take place at startup.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
  (require 'bind-key) ; Needs to be here for :bind to work with byte-compiled emacs.el ... not sure why
#+end_src

***** COMMENT For some reason, =require '(bind-key)= needs to be overtly stated (and seemingly outside of =eval-when-compile= for =:bind= personal keybindings to work with byte compilation (MEA - [2018-11-03 Sat])

** Global Defaults

Some core editing desirables:

- The variable =truncate-lines= turns off wrapping. Long lines will show a continuation character in the right margin.
- To indicate the presence of empty lines at the end of a file, a marker is placed in the left fringe.
- I require final newlines globally.

#+begin_src emacs-lisp
  (setq-default truncate-lines t
                indicate-empty-lines t
                require-final-newline t)
#+end_src

*** Aggressive Indent

The package reindents code after every change, making it purportedly more reliable than =electric-indent-mode=.

Because I mainly use Lisp and Python, I want aggressive indenting to be specific to =emacs-lisp-mode= so I activate it via hook.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))
#+END_SRC

** Fonts

*** Font Locking

Font Lock mode is a minor mode, always local to a particular buffer, and each buffer's major made tells Font Lock mode which text to fontify (add faces to). A programming language, for instance, will have rules about fontifying syntactically relevant constructs like comments, strings, and function names (from [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][the GNU Emacs manual]]).

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

*** Default Fonts

The default fonts need to be installed at least for the relevant user under =~/.fonts=. I currently use the Input series of fonts.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Input Mono 11" ))
  (set-face-attribute 'default t :font "Input Mono 11" )
  (set-face-attribute 'variable-pitch nil :font "Input Serif 11")
  (set-face-attribute 'fixed-pitch nil :font "Input Mono 11")
  (add-hook 'text-mode-hook 'variable-pitch-mode)
#+END_SRC

*** Font Switching

Establish function to set font to variable width in current buffer:

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-variable ()
    "Set font to a variable width (proportional) fonts in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "Input Serif"))
    (buffer-face-mode))
#+END_SRC

Establish function to set font to fixed width in current buffer:

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-fixed ()
    "Sets a fixed width (monospace) font in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "Input Mono"))
    (buffer-face-mode))
#+END_SRC

Finally, establish a function to set font to a pretty writing font if Input Serif isn’t what I want. Currently, I’m using ET Book, inspired by Edward Tufte. This function works best in cases where I am not creating tables or doing coding, just hard-core prose.

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-writing ()
    "Set font to a variable width (proportional) fonts in current buffer when writing prose"
    (interactive)
    (setq buffer-face-mode-face '(:family "ETBembo"))
    (buffer-face-mode))
#+END_SRC

=Control-c + u + f/v/w= to change font type:

#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-c u f" . owl/buffer-face-mode-fixed)
             ("C-c u v" . owl/buffer-face-mode-variable)
             ("C-c u w" . owl/buffer-face-mode-writing))
#+END_SRC

*** Font Sizing

Individual hydras are written in the relevant place in the configuration.

I like a hydra to help me increase or decrease text scale in a given buffer:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (global-map "<f6>")
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out") 
  ("r" (text-scale-set 0) "reset")
  ("0" (text-scale-set 0) :bind nil :exit t)
  ("1" (text-scale-set 0) nil :bind nil :exit t))
#+END_SRC

** Themes

Ensure that variable pitches are respected in loaded themes:

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
#+END_SRC

*** Themes in Rotation

**** Programming Themes

***** [[https://peach-melpa.org/themes/doom-themes][doom-themes]]

=doom-themes-org-config= corrects and improves Org's native fontification.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config (setq doom-themes-enable-bold t
                  doom-themes-enable-italic t)
    (doom-themes-org-config))
#+END_SRC

***** [[https://peach-melpa.org/themes/flatui-dark-theme][flatui-dark-theme]]

#+BEGIN_SRC emacs-lisp
  (use-package flatui-dark-theme) 
#+END_SRC

***** [[https://peach-melpa.org/themes/kaolin-themes][kaolin-themes]]

#+begin_src emacs-lisp
  (use-package kaolin-themes)
#+end_src

**** Writing Themes

***** [[https://peach-melpa.org/themes/poet-theme][poet-themes]]

For writing.

#+begin_src emacs-lisp
  (use-package poet-theme)
#+end_src

**** Org Themes

Leuven is the light theme.

***** [[https://peach-melpa.org/themes/parchment-theme][parchment-theme]]

Inspired by Leuven.

#+begin_src emacs-lisp
  (use-package parchment-theme)
#+end_src

*** Functions to Switch Among Themes

Establish a rotating index of themes:

#+BEGIN_SRC emacs-lisp
  (setq owl/themes '(doom-opera  poet poet-dark poet-monochrome poet-dark-monochrome kaolin-aurora kaolin-valley-light kaolin-valley-dark  parchment leuven))
  (setq owl/themes-index 0)
#+END_SRC

I then define a function to cycle through the index of themes and assign it to =<f12>= globally.

#+BEGIN_SRC emacs-lisp
  (defun owl/cycle-theme ()
    (interactive)
    (setq owl/themes-index (% (1+ owl/themes-index) (length owl/themes)))
    (owl/load-indexed-theme))

  (global-set-key (kbd "<f12>") 'owl/cycle-theme)
#+END_SRC

In order to prevent overlay, =owl/cycle-theme= depends on on two additional functions:

#+BEGIN_SRC emacs-lisp
  (defun owl/load-indexed-theme ()
    (owl/try-load-theme (nth owl/themes-index owl/themes)))

  (defun owl/try-load-theme (theme)
    (if (ignore-errors (load-theme theme :no-confirm))
	(mapcar #'disable-theme (remove theme custom-enabled-themes))
      (message "Unable to find theme file for ‘%s’" theme)))
#+END_SRC

** Accessibility

*** Hinting

To remember all custom functions I create (=owl/NAME=), the following function will help format a simple table:

#+BEGIN_SRC emacs-lisp
  (defun owl/remember-all-custom-functions ()
    "Function to format a simple table with all custom functions that I created."
    (let* ((custom-list (apropos-internal "^owl/"))
	   (func-list (seq-filter 'functionp custom-list))
	   (docs (mapcar 'documentation func-list))
	   (docs-nnil (mapcar #'(lambda (el) (if el el "There isn't docstrings to this function! Shame!")) docs))
	   (docs-fmt (mapcar #'(lambda (el) (string-join (split-string el "\n") " ")) docs-nnil))
	   (res '()))
      (dotimes (index (length func-list))
	(push `(,(nth index func-list) ,(nth index docs-fmt)) res))
      res))
#+END_SRC

The [[https://github.com/justbur/emacs-which-key][which-key]] package displays available keybindings in popup:

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (which-key-setup-side-window-right-bottom)
  (setq which-key-max-description-length 60))
#+END_SRC

The [[https://github.com/Wilfred/helpful][helpful]] package provides better contextual information:

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  ("C-h f" . helpful-function)
  ("C-h x" . helpful-command)
  ("C-h z" . helpful-macro))
#+END_SRC

*** Hydra Configuration

Hydra allows me to display a list of all the commands implemented in the echo area and easily interact with them.

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :init
  (setq hydra-is-helpful t)
  :config
  (require 'hydra-ox))
#+END_SRC

*** Ace Window

See http://bnbeckwith.com/bnb-emacs/ for supercharged variant on C-x o traversal.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :demand t
    :bind
    ("<f9> a" . ace-window)
    :config
    (setq aw-keys '(?j ?k ?l ?n ?m)
	  aw-leading-char-style 'path
	  aw-dispatch-always t
	  aw-dispatch-alist
	  '((?x aw-delete-window "Ace - Delete Window")
	    (?c aw-swap-window   "Ace - Swap window")
	    (?n aw-flip-window   "Ace - Flip window")
	    (?v aw-split-window-vert "Ace - Split Vert Window")
	    (?h aw-split-window-horz "Ace - Split Horz Window")
	    (?m delete-other-windows "Ace - Maximize Window")
	    (?b balance-windows)))

    (set-face-attribute 'aw-leading-char-face nil :height 2.0)
  )
#+END_SRC

Manipulate window size with a hydra.

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window-size (:color amaranth)
    "Window size"
    ("h" shrink-window-horizontally "shrink horizontal")
    ("j" shrink-window "shrink vertical")
    ("k" enlarge-window "enlarge vertical")
    ("l" enlarge-window-horizontally "enlarge horizontal")
    ("q" nil "quit"))
  (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
#+END_SRC

*** Zoom Window

#+BEGIN_SRC emacs-lisp
  (use-package zoom-window
    :bind ("C-x C-z" . zoom-window-zoom))
#+END_SRC

** Navigation

*** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
	  ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)
    ;;*** Find file actions
    ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
    (setq ivy-use-virtual-buffers t)
    ;; number of result lines to display
    (setq ivy-height 10)
    ;; does not count candidates
    (setq ivy-count-format "")
    ;; no regexp by default
    (setq ivy-initial-inputs-alist nil)
    ;; configure regexp engine
    (setq ivy-re-builders-alist
	  ;; allow input not in order
	  '((t . ivy--regex-ignore-order))))

  (use-package ivy-hydra)

#+END_SRC

*** Counsel

Counsel allows me to utilize ivy by replacing many built-in and common functions with richer versions.

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile)
  (use-package counsel
    :demand t)
#+END_SRC

*** Swiper

Swiper is a searching utility with quick preview in minibuffer. I load it when =swiper= or =swiper-all= is called.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all))
#+END_SRC

** Project Management

*** Projectile

Projectile is a quick and easy project management package.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :config
    (setq projectile-project-search-path '("~/projects/"))
    (setq projectile-require-project-root nil))
#+END_SRC

*** Version Control

**** Magit

Magit allows use of Git inside of Org-Mode. No more bumping out to a terminal.

#+begin_src emacs-lisp
  (use-package magit
    :preface (message "Magit is available at byte-compile time. I am proof thereof.")
    :commands magit-get-top-dir
    :init (setq magit-completing-read-function 'ivy-completing-read)
    :bind (("<f5>" . magit-status)
           ("C-c v t" . magit-status)
           ("C-c f" . magit-grep)))

#+end_src

**** Local Backups

The following defaults allow for a saner backup system with Emacs files.

Server and long-term backups are handled via Syncthing/Nextcloud and other methods.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
        create-lockfiles nil
        backup-directory-alist '((".*" . "~/.emacs-saves"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

** Org-Mode Initialization

I favor the newer version of Org-Mode over the built-in one(s).

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :defer t)
#+end_src

I want to ensure that ELPA Org is prioritized above built-in Org:

#+begin_src emacs-lisp
  (require 'cl)
  (setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+end_src

Bleeding-edge Org (9.2, sometime in 2018) got rid of easy-tempalate expansion (e.g., =<s TAB= expands to a source block). Instead =org-tempo= must now be required if the old expansion method should still be used. Note that =C-c C-,= will pull up a list of expansion templates.

#+begin_src emacs-lisp
(require  'org-tempo)
#+end_src

Source blocks in =org-mode= should be sensitive to indentation norms:

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

The default =org-directory= is =~/org=. It can be symlinked but needs to be present as such.

#+begin_src emacs-lisp
  (setq org-directory "~/org")
#+end_src

*** Org Defaults

Establish some meaningful defaults for =org-mode=: 

- =org-confirm-babel-evaluate= :: Set to nil; no need to confirm =org-babel= evaluations of code.

#+BEGIN_QUOTE
When t, Org prompts the user for confirmation before executing each code block. When nil, Org executes code blocks without prompting the user for confirmation. When this option is set to a custom function, Org invokes the function with these two arguments: the source code language and the body of the code block. The custom function must return either a t or nil, which determines if the user is prompted. Each source code language can be handled separately through this function argument. 
#+END_QUOTE

- =org-confirm-elisp-link-function= :: No need to prompt me before executing an Emacs Lisp link
- =org-log-done= ::  
- =org-hide-emphasis-markers= :: Remove markup characters and display closer to output.
- =org-return-follows-link= :: Yes, please!

#+BEGIN_SRC emacs-lisp
  (setq-default org-confirm-babel-evaluate nil
                org-confirm-elisp-link-function nil
                org-enforce-todo-dependencies t
                org-log-done t
                org-hide-emphasis-markers t
                org-return-follows-link t)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

*** Org Modules

Org modules seem to be a bit like an internal extension system of self-contained libraries, with some modules comprising Org's core and others external to it. There are a number of Org extensions that are initialized as =org-modules=.
- The package/library/module =org-protocol= allows for capturing webpages and links while browsing and importing that into predefined capture templates.
- The module =org-inlinetask= allows for tasks to be inserted within outline structures without counting themselves as a heading of the structure /per se/. This is accomplished by making the task having $>15$ stars by default (something that can be changed globally or specific to a file).

Org-modules' individual behavior is established under their own headings below (if needed).

#+BEGIN_SRC emacs-lisp
  (setq org-modules (quote (org-bbdb
                            org-bibtex
                            org-crypt
                            org-gnus
                            org-id
                            org-info
                            org-habit
                            org-inlinetask
                            org-irc
                            org-protocol
                            org-w3m)))
#+END_SRC

**** COMMENT List of modules I'm considering not using:
- =org-gnus=
- =org-irc=
- =org-w3m=

** Org Agenda

The ~org-plus-contrib~ repository allows ~org-agenda~ to be used with the ~use-package~ syntax. Currently, I set many Agenda features outside of this block, however.

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure org-plus-contrib)
#+end_src

I bind ~org-agenda~ to ~C-c a~:

#+begin_src emacs-lisp
  (bind-keys ("C-c a" . org-agenda))
#+end_src

*** Agenda Files

The following code sets the main "agenda" files.

Note that "projects" of various sorts, with their own ~TODO~ items, will not by default appear on the Org Agenda. Currently, this is by design: ~TODO~-cluttering is a well-known gripe against Org and GTD.

From a [[https://stackoverflow.com/questions/52051230/agenda-view-in-org-mode][Stack Overflow question]]:

#+begin_quote
A quick way to add the current file temporarily to org-agenda-files is C-c [ (which is bound to org-agenda-file-to-front and as its name implies, adds the current file to the front of the list). You can get rid of it with C-c ]
#+end_quote

I use this method until a project "proves" that it should be added to the permanent list of agenda files.

#+begin_src emacs-lisp
  (setq org-agenda-files (apply 'append
                           (mapcar
                            (lambda (directory)
                              (directory-files-recursively
                               directory org-agenda-file-regexp))
                            '("~/org/captures/"
                              "~/org/hub/"
                              "~/org/daybook/"
                              "~/.emacs.d/"))))
#+end_src

*** 

*** Habits (=org-habit=)

Habit tracking via =org-habit= will show a graph in the agenda tracking progress and consistency for established habits. I think it's a good idea to keep the set of habits small and specific.

From [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaraon Bieber's org-mode setup]]:

#+BEGIN_QUOTE
To create a habit, you need two things:

1. A SCHEDULED tag with a repeat specification (like .+ or ++), and
2. A STYLE property set to the value habit.
#+END_QUOTE

I like my habit graph to show throughout the day even if I’ve already completed a habit, so I adjust =org-habit-show-all-today=:

#+BEGIN_SRC emacs-lisp
  (setq org-habit-show-all-today t)
#+END_SR

** Tasks and States

My task keywords generally follow Bernt Hansen's [[http://doc.norang.ca/org-mode.html#TasksAndStates][set of tasks and state transitions]]. I like the simplicity of his insight that a "project" is simply a ~TODO~ with subtasks, and I like the ability to comment on /why/ I'm holding a task. The state transitions he implements are sensible as well.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELED(c@/!)" "PHONE" "MEETING"))))
#+end_src

*** Fast Todo Selection

The ~fast-todo-selection~ setting allows selection of /any/ todo state via ~C-c C-t KEY~. The second setting allows simple changing of todo states (~Shift-Left~ or ~Shift-Right~) without having to change other information such as timestamps or notes.

#+begin_src emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

*** State Triggers

Here I borrow wholesale from [[http://doc.norang.ca/org-mode.html#ToDoStateTriggers][Bernt Hansen's configuration]] (except for the spelling of =CANCEL(L)ED=). I mean, I'm not favorable to the American spelling, but whatever (cf. /cancellation/, though of course there is a distinction to be made between derivational and inflectional endings and their ability to trigger spelling changes).

The reason for this code is that I want to be better about task filtering in Agenda views.

#+begin_quote
 I have a few triggers that automatically assign tags to tasks based on state changes. If a task moves to ~CANCELLED~ state then it gets a ~CANCELLED~ tag. Moving a ~CANCELLED~ task back to ~TODO~ removes the ~CANCELLED~ tag. These are used for filtering tasks in agenda views which I'll talk about later.

The triggers break down to the following rules:

    Moving a task to ~CANCELLED~ adds a ~CANCELLED~ tag
    Moving a task to ~WAITING~ adds a ~WAITING~ tag
    Moving a task to ~HOLD~ adds ~WAITING~ and ~HOLD~ tags
    Moving a task to a done state removes ~WAITING~ and ~HOLD~ tags
    Moving a task to ~TODO~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags
    Moving a task to ~NEXT~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags
    Moving a task to ~DONE~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags

The tags are used to filter tasks in the agenda views conveniently.
#+end_quote

#+begin_src emacs-lisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELED" ("CANCELED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELED") ("HOLD")))))
#+end_src

** Org Journal as Task Daybook

The directory =~/org/daybook= holds a set of short diary files that together comprise a bullet-journal-esque daybook.

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :defer t
    :custom
    (org-journal-dir "~/org/daybook/")                                                             ; location
    (org-journal-date-format "%A, %x")                                                             ; date name format
    (org-journal-carryover-items "TODO=\"TODO\"|TODO=\"STARTED\"|TODO=\"NEXT\"|TODO=\"WAITING\"")  ; carryover items
    (org-journal-enable-agenda-integration t)                                                      ; ensure entries are on the agenda
    )
  (org-journal-update-auto-mode-alist)
#+END_SRC

I also specify an =org-capture= template that inserts a =TODO= heading, timestamped in a way =org-journal= and =org-agenda= will recognize. This consists of a function, =owl/org-journal-find-location=, and an associated capture block.

#+BEGIN_EXAMPLE
(defun owl/org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))
#+END_EXAMPLE

The capture block prompts for a task title, tag, and effort estimate; the tag is drawn in tags in the completion file and defaults to what I want, namely, the set of GTD context tags.

#+BEGIN_EXAMPLE
(defvar owl/org-basic-daybook-template
      "* TODO [#B] %(format-time-string org-journal-time-format)%^{Task} %^g\nSCHEDULED: %^t\n:PROPERTIES:\n:Created: %U\n:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n:END:"
      "Template for basic daybook task entry.")
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  ("d"
     "daybook entry"
     entry
     (function owl/org-journal-find-location),
     owl/org-basic-daybook-template     ; template
     :empty-lines 1)
#+END_EXAMPLE

** Clock

There isn't much here yet because I'm not sure I want to use clocking features, though I can see the value and would like to use them better in the future.

** Org Capture and Refile

Org-mode capture templates allow for central implementations of the PARA/BASB concept, as envisioned by Tiago Forte.

*** Capture Code (=org-capture=)

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure nil
    :after org
    :bind (("C-c c" . org-capture)
           ("C-c w" . org-refile))
    :preface
    (defvar owl/org-basic-task-template
      "* TODO [#B] %^{Task} %^g\nSCHEDULED: %^t\n:PROPERTIES:\n:Created: %U\n:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n:END:"
      "Template for basic task.")

    (defvar owl/org-daybook-task-template
      "* TODO %^{Task} %^g\n%^T\n:PROPERTIES:\n:Created: %U\n:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n:END:"
      "Template for basic daybook task entry. No time indicator for time of entry; prompt for scheduled time/date.")

    (defvar owl/org-daybook-entry-template
      "* NOTE %(format-time-string org-journal-time-format)%^{Title} %^g\n:PROPERTIES:\n:Created: %U\n:END:\n%?"
      "Template for basic daybook journal entry.")

    (defvar owl/org-contacts-template "* %(org-contacts-template-name)
                          :PROPERTIES:
                          :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
                          :BIRTHDAY: %^{yyyy-mm-dd}
                          :EMAIL: %(org-contacts-template-email)
                          :NOTE: %^{NOTE}
                          :END:" "Template for org-contacts.")

    (defun owl/org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))

    (setq org-capture-templates `(("u"                             ; key
                                   "unscheduled task in place"     ; description
                                   entry                           ; type
                                   (function (lambda () (message "You have already arrived at your destination."))) ; target
                                   "* TODO [#B] %^{Todo} %^g\n:PROPERTIES:\n:Created: %U\n:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n:END:"                          ; template
                                   :prepend nil                    ; properties
                                   :empty-lines 0                  ; properties
                                   :created t                      ; properties
                                   )
                                  ("d" "daybook")
                                  ("dt"				
                                   "daybook task"
                                   entry
                                   (function owl/org-journal-find-location),
                                   owl/org-daybook-task-template     ; template
                                   :empty-lines 1)
                                  ("de"
                                   "daybook entry"
                                   entry
                                   (function owl/org-journal-find-location),
                                   owl/org-daybook-entry-template
                                   :empty-lines 1)
                                  ("a"               
                                   "article"         
                                   entry             
                                   (file+headline "~/org/cpb/bibliographies/mainref.org" "Article") 
                                   "* %^{Title} %(org-set-tags)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %A\n:END:\n%i\nBrief description:\n%?" 
                                   :prepend t       
                                   :empty-lines 1   
                                   :created t       
                                   )
                                  ("c" 
                                   "contact"
                                   entry
                                   (file "~/org/hub/contacts.org"),
                                   owl/org-contacts-template
                                   :empty-lines 1)
                                  ("n"
                                   "note"
                                   entry
                                   (file+headline ,org-default-notes-file "Notes")
                                   "* %? :NOTE:\n:LOGBOOK:\n:CREATED: %U\n:END:"
                                   :prepend nil
                                   :empty-lines 0
                                   :created t)
                                  ("j"
                                   "journal entry"
                                   entry (file+datetree "~/org/cpb/cpb.org")
                                   "* Event: %?\n\n  %i\n\n  From: %a"
                                   :empty-lines 1)
                                  ("r"
                                   "recipe"
                                   entry
                                   (file+headline "~/org/cpb/food.org" "Recipes")
                                   "* TOCOOK %?\n:LOGBOOK:\n:CREATED: %U\n:END:\n:PROPERTIES:\n:SOURCE: \n:SERVES: \n:END:\n** Ingredients\n** Preparation"
                                   :prepend nil
                                   :empty-lines 0
                                   :created t)				
                                  ("e"
                                   "elfeed"
                                   entry
                                   (file "~/org/cpb/cpb.org")
                                   "* %a  %^G \n:LOGBOOK:\n:CAPTURED: %U\n:END:\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n" 
                                   :prepend nil
                                   :empty-lines 0
                                   :created t
                                   )
                                  ("f" "Fitness")
                                  ("fw" "Weight" 
                                   table-line
                                   "| | %U | %^{Weight} | %^{Comment}"
                                   :immediate-finish t)
                                  ("s"
                                   "selected org-protocol link"
                                   entry
                                   (file "~/org/captures/captures.org")
                                   "* %^{Title}\nSource: %u, [[%:link][%:description]] \n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                                  ("p" 
                                   "org-protocol-link"
                                   entry
                                   (file "~/org/captures/captures.org")
                                   "* %? [[%:link][%:description]] \nCaptured On: %U")				
                                  )
          )
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun owl/org-call-src-block (name)
    ;; Based on <http://kitchingroup.cheme.cmu.edu/blog/2014/08/11/Using-org-mode-outside-of-Emacs-sort-of/>
    ;; This works better than the org-sbe (aka sbe) macro, because it
    ;; calls the block upon expansion, making it difficult to bind to
    ;; a command to run later
    ;; TODO: Use `org-babel-goto-named-src-block'!  I guess it's new...or not, it's from 2010!
    (org-with-wide-buffer
     (-when-let (src (org-element-map (org-element-parse-buffer) 'src-block
                       (lambda (element)
                         (when (string= name (org-element-property :name element))
                           element))
                       nil ;info
                       t ))
       (goto-char (org-element-property :begin src))
       (let ((org-confirm-babel-evaluate nil))
         (org-babel-execute-src-block)))))
#+END_SRC

*** Capture Sources

**** Elfeed

#+begin_src emacs-lisp
  ;; Load elfeed-org
  (require 'elfeed)
  (require 'elfeed-org)

  (bind-keys ("C-x w" . elfeed)) 

  ;; Initialize elfeed-org
  ;; This hooks up elfeed-org to read the configuration when elfeed
  ;; is started with =M-x elfeed=
  (elfeed-org)

  ;; Optionally specify a number of files containing elfeed
  ;; configuration. If not set then the location below is used.
  ;; Note: The customize interface is also supported.
  (setq rmh-elfeed-org-files (list "~/org/captures/elfeed.org"))

  ;; Somewhere in your .emacs file
  ;; (setq elfeed-feeds
  ;;       '("http://nullprogram.com/feed/"
  ;;         "http://planet.emacsen.org/atom.xml"))
#+end_src


**** Screenshots
**** Web Protocol
*** Refile Behaviors

I like =org-refile= to be promiscuous: it should use outline paths, complete in steps, and allow for the creation of parent nodes on-the-fly. See See https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html for details on some of the hacks here.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  ;; Allow on-the-fly creation of parent headings
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

*** Refile Targets (Integration with P.A.R.A.)

The following code 

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
#+END_SRC

The package [[https://github.com/mwfogleman/org-randomnote][org-randomnote]], created by [[https://github.com/mwfogleman][Tasshin Fogleman]], further implements P.A.R.A. workflow by mimicking the “Random Note” functionality advocated by Tiago Forte with Evernote.

It can be used to “revisit nearly-forgotten but potentially-useful notes, or to spark creative insights by bringing older subjects into mind with new subjects.”

Currently, I bind it to =C-c g= and focus only on the =captures.org= file and several other well-stocked files. There is additional code that can traverse entire directories. I might want to add this later.

#+BEGIN_SRC emacs-lisp
  (use-package org-randomnote
    :ensure t
    :bind ("C-c g" . org-randomnote)
    :config (setq org-randomnote-candidates '("~/org/captures/captures.org"
                                              "~/org/hub/systems.org"
                                              "~/org/cpb/journal.org"
                                              "~/org/cpb/cs.org"
                                              "~/org/cpb/reading.org"
                                              "~/org/cpb/notebook.org"))
    )
#+END_SRC

** Encryption
** Contacts Management
** Programming Languages Management
*** Autocompletion

Package =auto-complete= works very well for some IDE-like behaviors.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish auto-complete-mode
    :config (ac-config-default))
#+END_SRC

*** Babel

I use =org-babel= to embed and process some code in my Org files. Here I initialize the set of languages I commonly and less-than-commonly rely on:

#+begin_src emacs-lisp
  (use-package gnuplot)
#+end_src

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)
                               (shell . t)
                               (python . t)
                               (gnuplot . t)))
#+end_src

** Reference and Resource Management
** Publishing
*** Commonplace Book
*** Hosted Private HTML
*** Blog and Microblog
** Writing Environment
*** Distraction-Free Writing

I use the =writeroom-mode= package as my main distraction destroyer. It creates a fullscreen Emacs environment, removes the modeline, and centers the text. It works well in its default aspect for me, though it's quite configurable.

I bind it to =C-<f11>= to keep it close to the toggle for =poet-theme=, which I made =C-<f12>=.

#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :bind ("C-<f11>" . writeroom-mode)
    :config
    (setq writeroom-width 100
          writeroom-mode-line nil
          writeroom-global-effects '(writeroom-set-bottom-divider-width
                                     writeroom-set-internal-border-width
                                     (lambda (arg)
                                       (let ((langs '("python"
                                                      "emacs-lisp"
                                                      "common-lisp"
                                                      "js"
                                                      "ruby")))
                                         (cond
                                          ((= arg 1)
                                           (progn
                                             (setq org-src-block-faces
                                                   (mapcar (lambda (lang) (list lang '(:family "Input Mono" :height 1.0))) langs))
                                             (normal-mode)
                                             (variable-pitch-mode)))
                                          ((= arg -1)
                                           (progn
                                             (setq org-src-block-faces
                                                   (mapcar (lambda (lang) (list lang '(:family "Input Mono" :height 1.0))) langs))
                                             (normal-mode)
                                             (variable-pitch-mode)
                                             (variable-pitch-mode)))))))))
#+END_SRC

** Dashboard

This is an extensible Emacs startup screen that I've started to experiment with as a slow replacement for =organizer.org=.

It's not doing a great job interacting with Agenda [2019-06-09 Sun].

Dashboard requires =page-break-lines= and =projectile=.

#+BEGIN_SRC emacs-lisp

  (use-package page-break-lines)

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    ;; Set the title
    (setq dashboard-banner-logo-title "Dashboard")
    ;; Set the banner
    (setq dashboard-startup-banner "/home/owl/.emacs.d/user/images/dashboard-banner.png")
    ;; Customize widgets
    (setq dashboard-items '((recents . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 1)))
    (setq show-week-agenda-p t)
    )

#+END_SRC

** Toc-org
 
Install and load the =toc-org= package after org mode is loaded. This is the package that automatically generates an up to date table of contents for us.

 #+begin_src emacs-lisp
   (use-package toc-org
     :after org
     :init (add-hook 'org-mode-hook #'toc-org-enable))
 #+end_src

** Post Initialization

 Lower our GC thresholds back down to a sane level.

 #+begin_src emacs-lisp
   (setq gc-cons-threshold 16777216
	 gc-cons-percentage 0.1)
 #+end_src
