#+TITLE: Emacs Literate Configuration
#+AUTHOR: Matthew Edward Adams 
#+PROPERTY: header-args :tangle yes
#+STARTUP: indent
* Structure

Currently I am trying the following structure for my Org-based workflow:

#+BEGIN_EXAMPLE
├── captures
│   ├── captures.org
│   └── unfiled
├── cpb
│   ├── digital.nb.org
│   ├── journal.org
│   ├── math.nb.org
│   └── reference.org
├── daybook
│   ├── 20190203
│   └── 20190204
└── hub
    ├── calendar.org
    ├── contacts.bbdb
    ├── meta.org
    └── systems.org
#+END_EXAMPLE

This structure represents about a year of thinking through task, workflow, and knowledge management systems. I don’t think it’s my final word, but it does reflect best where I want to lay my energies. I want things simple.

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_5_gh:
- [[#structure][Structure]]
- [[#configuration][Configuration]]
  - [[#about-this-file][About This File]]
  - [[#config-file-tweaks][Config File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#reload-configuation][Reload Configuation]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#garbage-collection][Garbage Collection]]
    - [[#byte-compilation][Byte Compilation]]
    - [[#startup-behavior][Startup Behavior]]
    - [[#directory-structure][Directory Structure]]
    - [[#package-management][Package Management]]
      - [[#package-settings][Package Settings]]
      - [[#use-package-settings][Use-Package Settings]]
      - [[#manually-set-load-path][Manually Set Load Path]]
      - [[#initialize-package-management][Initialize Package Management]]
  - [[#global-defaults][Global Defaults]]
  - [[#accessibility][Accessibility]]
  - [[#navigation][Navigation]]
  - [[#project-management][Project Management]]
    - [[#version-control][Version Control]]
      - [[#magit][Magit]]
  - [[#org-mode-initialization][Org-Mode Initialization]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-journal-as-task-daybook][Org Journal as Task Daybook]]
  - [[#org-capture-and-refile][Org Capture and Refile]]
  - [[#contacts-management][Contacts Management]]
  - [[#encryption][Encryption]]
  - [[#programming-languages-management][Programming Languages Management]]
  - [[#reference-and-resource-management][Reference and Resource Management]]
  - [[#publishing][Publishing]]
  - [[#writing-environment][Writing Environment]]
  - [[#dashboard][Dashboard]]
  - [[#toc-org][Toc-org]]
  - [[#post-initialization][Post Initialization]]

** About This File

This is a rebuild and refactoring of my Emacs configuration using literate programming techniques.

All of my configuration is stored here (no requiring and providing of subfiles) at present.

It contains some optimization for byte-compiling to ensure a faster load time.

** Config File Tweaks

There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle

First there is a property defined on the file:

#+begin_src :tangle no
header-args :tangle yes
#+end_src

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Reload Configuation

Reload my configuration from inside of =org-mode= and assign custom function to =C-c r=.

#+begin_src emacs-lisp
  (defun owl/config-reload ()
    "Reloads ~/.emacs.d/emacs.org at runtime."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))

  (global-set-key (kbd "C-c r") 'owl/config-reload)
#+end_src

*** Visibility Settings

Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show its direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents

Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_5_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 5 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.

** Personal Information

Some basic values:

#+begin_src emacs-lisp
  (setq user-full-name "Matthew Edward Adams"
        user-mail-address "m2eadams@gmail.com")
#+end_src

** Emacs Initialization

*** Garbage Collection

I increase the =gc-cons-threshold= to a very high number to decrease the load and compile time.
I'll lower this value significantly after initialization has completed. I don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
	  gc-cons-percentage 0.6))
#+end_src

*** Byte Compilation

Disable certain byte compiler warnings to cut down on the noise. This can be removed
if I would like to see any and all byte compiler warnings.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+end_src

*** Startup Behavior

When I startup, I want a minimal Emacs layout: no startup screen, no toolbar, no scrollbar, and no menubar.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+end_src

*** Directory Structure

Set the directory where the Emacs configuration is installed.

#+begin_src emacs-lisp
  (setq user-emacs-directory (file-truename "~/.emacs.d/"))
#+end_src

Customizations are unwanted in =init.el= (and in general), so accidental customizations are stored in =custom.el= under =./user=.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/user/custom.el")
#+end_src

The default ELPA package directory is =.emacs.d/elpa=. User-defined or non-listed packages should be situated in =./user= directory.

Custom themes should be stored in =./user/themes/=.

*** Package Management

**** Package Settings

Set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on my behalf. Additionally I'm setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for me since
=use-package= will be handling that.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
	  package-user-dir "~/.emacs.d/elpa/"
	  package--init-file-ensured t
	  package-enable-at-startup t)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+end_src

**** Use-Package Settings

Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+begin_src emacs-lisp
  (setq use-package-always-defer nil
	use-package-verbose t)
#+end_src

**** Manually Set Load Path

We're going to set the load path ourselves so that we don't have to call =package-initialize= at runtime and incur a large performance hit. This load-path will actually be faster than the one created by =package-initialize= because it appends the elpa packages to the end of the load path. Otherwise any time a builtin package was required it would have to search all of third party paths first.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+end_src

**** Initialize Package Management

Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'. Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which we promptly install if it's missing. Finally we load =use-package= and tell it to always install any missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all of the package initialization during compilation so that when byte compiled, all of this time consuming code is skipped. This can be done because the result of byte compiling =use-package= statements results in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been previously compiled manually then all of the package initialization will still take place at startup.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
  (require 'bind-key) ; Needs to be here for :bind to work with byte-compiled emacs.el ... not sure why
#+end_src

***** COMMENT For some reason, =require '(bind-key)= needs to be overtly stated (and seemingly outside of =eval-when-compile= for =:bind= personal keybindings to work with byte compilation (MEA - [2018-11-03 Sat])

** Global Defaults

Some core editing desirables:

- The variable =truncate-lines= turns off wrapping. Long lines will show a continuation character in the right margin.
- To indicate the presence of empty lines at the end of a file, a marker is placed in the left fringe.
- I require final newlines globally.

#+begin_src emacs-lisp
  (setq-default truncate-lines t
                indicate-empty-lines t
                require-final-newline t)
#+end_src

** Accessibility
** Navigation
** Project Management

*** Version Control

**** Magit

Magit allows use of Git inside of Org-Mode. No more bumping out to a terminal.

#+begin_src emacs-lisp
  (use-package magit
    :preface (message "Magit is available at byte-compile time. I am proof thereof.")
    :commands magit-get-top-dir
    :init (setq magit-completing-read-function 'ivy-completing-read)
    :bind (("<f5>" . magit-status)
           ("C-c v t" . magit-status)
           ("C-c f" . magit-grep)))

#+end_src

** Org-Mode Initialization

I favor the newer version of Org-Mode over the built-in one(s).

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :defer t)
#+end_src

I want to ensure that ELPA Org is prioritized above built-in Org:

#+begin_src emacs-lisp
  (require 'cl)
  (setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+end_src

Bleeding-edge Org (sometime in 2018) got rid of easy-tempalate expansion (e.g., =<s TAB= expands to a source block). Instead =org-tempo= must now be required.

#+begin_src emacs-lisp
(require  'org-tempo)
#+end_src

Source blocks in =org-mode= should be sensitive to indentation norms:

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

** Org Agenda
** Org Journal as Task Daybook

** Org Capture and Refile
** Contacts Management
** Encryption
** Programming Languages Management

I use =org-babel= to embed and process some code in my Org files. Here I initialize the set of languages I commonly and less-than-commonly rely on:

#+begin_src emacs-lisp
  (use-package gnuplot)
#+end_src

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)
                               (shell . t)
                               (python . t)
                               (gnuplot . t)))
#+end_src

** Reference and Resource Management
** Publishing
** Writing Environment
** Dashboard
** Toc-org
 
Install and load the =toc-org= package after org mode is loaded. This is the package that automatically generates an up to date table of contents for us.

 #+begin_src emacs-lisp
   (use-package toc-org
     :after org
     :init (add-hook 'org-mode-hook #'toc-org-enable))
 #+end_src

** Post Initialization

 Lower our GC thresholds back down to a sane level.

 #+begin_src emacs-lisp
   (setq gc-cons-threshold 16777216
	 gc-cons-percentage 0.1)
 #+end_src
