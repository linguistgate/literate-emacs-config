#+TITLE: Emacs Literate Configuration
#+AUTHOR: Matthew Edward Adams 
#+PROPERTY: header-args :tangle yes
#+STARTUP: indent
* Table of Contents :TOC_5_gh:
- [[#configuration][Configuration]]
  - [[#config-file-tweaks][Config File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#reload-configuation][Reload Configuation]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#garbage-collection][Garbage Collection]]
    - [[#byte-compilation][Byte Compilation]]
    - [[#startup-behavior][Startup Behavior]]
    - [[#directory-structure][Directory Structure]]
    - [[#package-management][Package Management]]
      - [[#package-settings][Package Settings]]
      - [[#use-package-settings][Use-Package Settings]]
      - [[#manually-set-load-path][Manually Set Load Path]]
      - [[#initialize-package-management][Initialize Package Management]]
  - [[#personal-information][Personal Information]]
  - [[#accessibility][Accessibility]]
    - [[#hinting][Hinting]]
    - [[#hydra-configuration][Hydra Configuration]]
    - [[#windmove][Windmove]]
    - [[#ace-window][Ace Window]]
    - [[#zoom-window][Zoom Window]]
  - [[#navigation][Navigation]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
  - [[#fonts][Fonts]]
    - [[#font-locking][Font Locking]]
    - [[#default-fonts][Default Fonts]]
    - [[#font-switching][Font Switching]]
    - [[#font-sizing][Font Sizing]]
  - [[#themes][Themes]]
    - [[#themes-in-rotation][Themes in Rotation]]
      - [[#programming-themes][Programming Themes]]
      - [[#writing-themes][Writing Themes]]
      - [[#org-themes][Org Themes]]
  - [[#org-mode-initialization][Org-Mode Initialization]]
  - [[#org-agenda][Org Agenda]]
    - [[#agenda-files][Agenda Files]]
    - [[#habits-org-habit][Habits (=org-habit=)]]
  - [[#tasks-and-states][Tasks and States]]
    - [[#fast-todo-selection][Fast Todo Selection]]
    - [[#state-triggers][State Triggers]]
  - [[#project-management][Project Management]]
    - [[#projectile][Projectile]]
    - [[#version-control][Version Control]]
      - [[#magit][Magit]]
      - [[#local-backups][Local Backups]]
  - [[#toc-org][Toc-org]]
  - [[#post-initialization][Post Initialization]]

* Configuration
:PROPERTIES:
:VISIBILITY: children
:ID:       079e06ac-5c7d-4b50-aafa-9ad7889ce0c0
:END:
** Config File Tweaks
:PROPERTIES:
:ID:       5f35a8e1-12cf-4d3b-8753-34cdfff75fd4
:END:

There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
:PROPERTIES:
:ID:       a49db780-29bc-4c16-8c52-8787035e2001
:END:

First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Reload Configuation
:PROPERTIES:
:ID:       2fd7e19a-7f34-41f8-8f46-763c844b3f69
:END:

Reload my configuration from inside of =org-mode= and assign custom function to =C-c r=.

#+BEGIN_SRC emacs-lisp
  (defun owl/config-reload ()
    "Reloads ~/.emacs.d/emacs.org at runtime."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org")))

  (global-set-key (kbd "C-c r") 'owl/config-reload)
#+END_SRC

*** Visibility Settings
:PROPERTIES:
:ID:       f09e7ffe-e683-4a04-a04f-05755e10ea58
:END:

Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show its direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
:PROPERTIES:
:ID:       be48627e-307a-48f4-b920-9b05295ae60b
:END:

Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_5_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 5 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.
** Emacs Initialization
:PROPERTIES:
:ID:       43cacb3d-d9f4-4ee4-962c-4505bfc892ce
:END:

*** Garbage Collection
:PROPERTIES:
:ID:       f1073c8a-e27a-4815-89ab-d9561ca468ab
:END:

I increase the ~gc-cons-threshold~ to a very high number to decrease the load and compile time.
I'll lower this value significantly after initialization has completed. I don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
	  gc-cons-percentage 0.6))
#+END_SRC

*** Byte Compilation
:PROPERTIES:
:ID:       6dcd1b63-c9c4-4617-b8a2-c78cf9354ef3
:END:

Disable certain byte compiler warnings to cut down on the noise. This can be removed
if I would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** Startup Behavior
:PROPERTIES:
:ID:       4bc0d25d-02e9-48d0-ac77-dbdbf26c46c9
:END:

When I startup, I want a minimal Emacs layout: no startup screen, no toolbar, no scrollbar, and no menubar.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+END_SRC

*** Directory Structure
:PROPERTIES:
:ID:       84827ff9-e506-4e7f-b01c-2b3350f35eaa
:END:

Set the directory where the Emacs configuration is installed.

#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory (file-truename "~/.emacs.d/"))
#+END_SRC

Customizations are unwanted in =init.el= (and in general), so accidental customizations are stored in =custom.el= under =./user=.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/user/custom.el")
#+END_SRC

The default ELPA package directory is =.emacs.d/elpa=. User-defined or non-listed packages should be situated in =./user= directory.

Custom themes should be stored in =./user/themes/=.

*** Package Management
:PROPERTIES:
:ID:       e1799ef7-1ca6-4296-9ddc-fe538996292d
:END:

**** Package Settings
:PROPERTIES:
:ID:       88f08654-9178-4fa0-a845-5e34121ca990
:END:

Set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on my behalf. Additionally I'm setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for me since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
	  package-user-dir "~/.emacs.d/elpa/"
	  package--init-file-ensured t
	  package-enable-at-startup t)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** Use-Package Settings
:PROPERTIES:
:ID:       9d1b21fd-942d-45c1-a605-da6f9a9f97ca
:END:

Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer nil
	use-package-verbose t)
#+END_SRC

**** Manually Set Load Path
:PROPERTIES:
:ID:       3661381b-b296-44e9-b135-6677346d5d7a
:END:

We're going to set the load path ourselves so that we don't have to call =package-initialize= at runtime and incur a large performance hit. This load-path will actually be faster than the one created by =package-initialize= because it appends the elpa packages to the end of the load path. Otherwise any time a builtin package was required it would have to search all of third party paths first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

**** Initialize Package Management
:PROPERTIES:
:ID:       81b4a117-0aee-4dae-bd62-29412cb53ae3
:END:

Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'. Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which we promptly install if it's missing. Finally we load =use-package= and tell it to always install any missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all of the package initialization during compilation so that when byte compiled, all of this time consuming code is skipped. This can be done because the result of byte compiling =use-package= statements results in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
  (require 'bind-key) ; Needs to be here for :bind to work with byte-compiled emacs.el ... not sure why
#+END_SRC

** Personal Information
:PROPERTIES:
:ID:       5ffcf544-6fe1-4910-96bd-761e780a8a59
:END:

Some basic values:

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Matthew Edward Adams"
        user-mail-address "m2eadams@gmail.com")
#+END_SRC

** Accessibility

*** Hinting

To remember all custom functions I create (=owl/NAME=), the following function will help format a simple table:

#+BEGIN_SRC emacs-lisp
  (defun owl/remember-all-custom-functions ()
    "Function to format a simple table with all custom functions that I created."
    (let* ((custom-list (apropos-internal "^owl/"))
	   (func-list (seq-filter 'functionp custom-list))
	   (docs (mapcar 'documentation func-list))
	   (docs-nnil (mapcar #'(lambda (el) (if el el "There isn't docstrings to this function! Shame!")) docs))
	   (docs-fmt (mapcar #'(lambda (el) (string-join (split-string el "\n") " ")) docs-nnil))
	   (res '()))
      (dotimes (index (length func-list))
	(push `(,(nth index func-list) ,(nth index docs-fmt)) res))
      res))
#+END_SRC

The [[https://github.com/Wilfred/helpful][helpful]] package provides better contextual information:

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  ("C-h f" . helpful-function)
  ("C-h x" . helpful-command)
  ("C-h z" . helpful-macro))
#+END_SRC

*** Hydra Configuration
:PROPERTIES:
:ID:       5a53dcce-6315-4e2d-958f-1301c2bfdeea
:END:

Hydra allows me to display a list of all the commands implemented in the echo area and easily interact with them.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :init
    (setq hydra-is-helpful t)
    :config
    (require 'hydra-ox))
#+END_SRC

*** Windmove
:PROPERTIES:
:ID:       34dcae52-d56a-4f96-98b6-0ff1642461d4
:END:

Allows for simple traversal of windows beyond the cumbersome ~C-c o~ method.

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :bind
    (("<f2> <right>" . windmove-right)
     ("<f2> <left>" . windmove-left)
     ("<f2> <up>" . windmove-up)
     ("<f2> <down>" . windmove-down)))
#+END_SRC

*** Ace Window
:PROPERTIES:
:ID:       2e496530-d155-4ddf-abd3-ed0120b76d56
:END:

See http://bnbeckwith.com/bnb-emacs/ for supercharged variant on ~C-x o~ traversal.

To keep things tidy, the function key ~<f2>~ is also associated with Ace Window commands.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :demand t
    :bind
    ("<f2> a" . ace-window)
    :config
    (setq aw-keys '(?j ?k ?l ?n ?m)
	  aw-leading-char-style 'path
	  aw-dispatch-always t
	  aw-dispatch-alist
	  '((?x aw-delete-window "Ace - Delete Window")
	    (?c aw-swap-window   "Ace - Swap window")
	    (?n aw-flip-window   "Ace - Flip window")
	    (?v aw-split-window-vert "Ace - Split Vert Window")
	    (?h aw-split-window-horz "Ace - Split Horz Window")
	    (?m delete-other-windows "Ace - Maximize Window")
	    (?b balance-windows)))

    (set-face-attribute 'aw-leading-char-face nil :height 2.0)
  )
#+END_SRC

Manipulate window size with a hydra.

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window-size (:color amaranth)
    "Window size"
    ("h" shrink-window-horizontally "shrink horizontal")
    ("j" shrink-window "shrink vertical")
    ("k" enlarge-window "enlarge vertical")
    ("l" enlarge-window-horizontally "enlarge horizontal")
    ("q" nil "quit"))
  (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
#+END_SRC

*** Zoom Window
:PROPERTIES:
:ID:       8aad8c86-7387-4565-89cf-eb7f79e4f7fd
:END:

Selectively "zooms" one window of a complex windows configuration.

#+BEGIN_SRC emacs-lisp
  (use-package zoom-window
    :bind ("C-x C-z" . zoom-window-zoom))
#+END_SRC

** Navigation
*** Ivy
:PROPERTIES:
:ID:       0ed4dade-6383-48d7-afd6-56a566cf4115
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
          ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 10)
    (setq ivy-count-format "")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-ignore-order))))           ;; allow input not in order

  (use-package ivy-hydra)

#+END_SRC

*** Counsel
:PROPERTIES:
:ID:       205e2aef-0d9a-420a-adc3-27b21467e7c9
:END:

Counsel allows me to utilize ivy by replacing many built-in and common functions with richer versions.

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile)
  (use-package counsel
    :demand t)
#+END_SRC

*** Swiper
:PROPERTIES:
:ID:       1760b536-a071-42d4-bdb9-f6c4e445ad4d
:END:

Swiper is a searching utility with quick preview in minibuffer. I load it when =swiper= or =swiper-all= is called.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all))
#+END_SRC

** Fonts
*** Font Locking

Font Lock mode is a minor mode, always local to a particular buffer, and each buffer's major made tells Font Lock mode which text to fontify (add faces to). A programming language, for instance, will have rules about fontifying syntactically relevant constructs like comments, strings, and function names (from [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][the GNU Emacs manual]]).

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

*** Default Fonts

The default fonts need to be installed at least for the relevant user under =~/.fonts=. I currently use the Input series of fonts.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Input Mono 11" ))
  (set-face-attribute 'default t :font "Input Mono 11" )
  (set-face-attribute 'variable-pitch nil :font "Input Serif 11")
  (set-face-attribute 'fixed-pitch nil :font "Input Mono 11")
  (add-hook 'text-mode-hook 'variable-pitch-mode)
#+END_SRC

*** Font Switching
:PROPERTIES:
:ID:       15a55c7b-cdd9-4100-b0c5-d6c89db6856c
:END:

Establish function to set font to variable width in current buffer:

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-variable ()
    "Set font to a variable width (proportional) fonts in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "Input Serif"))
    (buffer-face-mode))
#+END_SRC

Establish function to set font to fixed width in current buffer:

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-fixed ()
    "Sets a fixed width (monospace) font in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "Input Mono"))
    (buffer-face-mode))
#+END_SRC

Finally, establish a function to set font to a pretty writing font if Input Serif isn’t what I want. Currently, I’m using ET Book, inspired by Edward Tufte. This function works best in cases where I am not creating tables or doing coding, just hard-core prose.

#+BEGIN_SRC emacs-lisp
  (defun owl/buffer-face-mode-writing ()
    "Set font to a variable width (proportional) fonts in current buffer when writing prose"
    (interactive)
    (setq buffer-face-mode-face '(:family "ETBembo"))
    (buffer-face-mode))
#+END_SRC

=Control-c + u + f/v/w= to change font type:

#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-c u f" . owl/buffer-face-mode-fixed)
             ("C-c u v" . owl/buffer-face-mode-variable)
             ("C-c u w" . owl/buffer-face-mode-writing))
#+END_SRC

*** Font Sizing

Individual hydras are written in the relevant place in the configuration.

I like a hydra to help me increase or decrease text scale in a given buffer:

#+BEGIN_SRC emacs-lisp :tangle no
(defhydra hydra-zoom (global-map "<f6>")
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out") 
  ("r" (text-scale-set 0) "reset")
  ("0" (text-scale-set 0) :bind nil :exit t)
  ("1" (text-scale-set 0) nil :bind nil :exit t))
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
#+END_SRC

*** Themes in Rotation
**** Programming Themes
**** Writing Themes

#+BEGIN_SRC emacs-lisp
  (use-package poet-theme)
#+END_SRC

**** Org Themes

** Org-Mode Initialization

I favor the newer version of Org-Mode over the built-in one(s).

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org)
#+END_SRC
 
** Org Agenda

The ~org-plus-contrib~ repository allows ~org-agenda~ to be used with the ~use-package~ syntax. Currently, I set many Agenda features outside of this block, however.

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure org-plus-contrib)
#+END_SRC

I bind ~org-agenda~ to ~C-c a~:

#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-c a" . org-agenda))
#+END_SRC

*** Agenda Files

The following code sets the main "agenda" files.

Note that "projects" of various sorts, with their own ~TODO~ items, will not by default appear on the Org Agenda. Currently, this is by design: ~TODO~-cluttering is a well-known gripe against Org and GTD.

From a [[https://stackoverflow.com/questions/52051230/agenda-view-in-org-mode][Stack Overflow question]]:

#+BEGIN_QUOTE
A quick way to add the current file temporarily to org-agenda-files is C-c [ (which is bound to org-agenda-file-to-front and as its name implies, adds the current file to the front of the list). You can get rid of it with C-c ]
#+END_QUOTE

I use this method until a project "proves" that it should be added to the permanent list of agenda files.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (apply 'append
                                (mapcar
                                 (lambda (directory)
                                   (directory-files-recursively
                                    directory org-agenda-file-regexp))
                                 '("~/org/hub/"                                
                                   "~/.emacs.d/"))))
#+END_SRC

*** Habits (=org-habit=)
:PROPERTIES:
:ID:       6bd97298-43c5-4bcb-ae63-6dfbbd1a93f0
:END:

Habit tracking via =org-habit= will show a graph in the agenda tracking progress and consistency for established habits. I think it's a good idea to keep the set of habits small and specific.

From [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaraon Bieber's org-mode setup]]:

#+BEGIN_QUOTE
To create a habit, you need two things:

1. A SCHEDULED tag with a repeat specification (like .+ or ++), and
2. A STYLE property set to the value habit.
#+END_QUOTE

I like my habit graph to show throughout the day even if I’ve already completed a habit, so I adjust =org-habit-show-all-today=:

#+BEGIN_SRC emacs-lisp
  (setq org-habit-show-all-today t)
#+END_SRC

** Tasks and States

My task keywords generally follow Bernt Hansen's [[http://doc.norang.ca/org-mode.html#TasksAndStates][set of tasks and state transitions]]. I like the simplicity of his insight that a "project" is simply a ~TODO~ with subtasks, and I like the ability to comment on /why/ I'm holding a task. The state transitions he implements are sensible as well.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)"  "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELED(c@/!)" "PHONE" "MEETING")
                (sequence "TICKLER" "IDEA"))))
#+END_SRC

*** Fast Todo Selection

The ~fast-todo-selection~ setting allows selection of /any/ todo state via ~C-c C-t KEY~. The second setting allows simple changing of todo states (~Shift-Left~ or ~Shift-Right~) without having to change other information such as timestamps or notes.

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

*** State Triggers

Here I borrow wholesale from [[http://doc.norang.ca/org-mode.html#ToDoStateTriggers][Bernt Hansen's configuration]] (except for the spelling of =CANCEL(L)ED=). I mean, I'm not favorable to the American spelling, but whatever (cf. /cancellation/, though of course there is a distinction to be made between derivational and inflectional endings and their ability to trigger spelling changes).

The reason for this code is that I want to be better about task filtering in Agenda views.

#+BEGIN_QUOTE
 I have a few triggers that automatically assign tags to tasks based on state changes. If a task moves to ~CANCELLED~ state then it gets a ~CANCELLED~ tag. Moving a ~CANCELLED~ task back to ~TODO~ removes the ~CANCELLED~ tag. These are used for filtering tasks in agenda views which I'll talk about later.

The triggers break down to the following rules:

    Moving a task to ~CANCELLED~ adds a ~CANCELLED~ tag
    Moving a task to ~WAITING~ adds a ~WAITING~ tag
    Moving a task to ~HOLD~ adds ~WAITING~ and ~HOLD~ tags
    Moving a task to a done state removes ~WAITING~ and ~HOLD~ tags
    Moving a task to ~TODO~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags
    Moving a task to ~NEXT~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags
    Moving a task to ~DONE~ removes ~WAITING~, ~CANCELLED~, and ~HOLD~ tags

The tags are used to filter tasks in the agenda views conveniently.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELED" ("CANCELED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELED") ("HOLD")))))
#+END_SRC

** Project Management

*** Projectile

Projectile is a quick and easy project management package.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :config
    (setq projectile-project-search-path '("~/projects/"))
    (setq projectile-require-project-root nil))
#+END_SRC

*** Version Control

**** Magit

Magit allows use of Git inside of Org-Mode. No more bumping out to a terminal.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :preface (message "Magit is available at byte-compile time. I am proof thereof.")
    :commands magit-get-top-dir
    :init (setq magit-completing-read-function 'ivy-completing-read)
    :bind (("<f5>" . magit-status)
           ("C-c v t" . magit-status)
           ("C-c f" . magit-grep)))

#+END_SRC

**** Local Backups

The following defaults allow for a saner backup system with Emacs files.

Server and long-term backups are handled via Syncthing/Nextcloud and other methods.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
        create-lockfiles nil
        backup-directory-alist '((".*" . "~/.emacs-saves"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

** Toc-org
 
Install and load the =toc-org= package after org mode is loaded. This is the package that automatically generates an up to date table of contents for us.

 #+BEGIN_SRC emacs-lisp
   (use-package toc-org
     :after org
     :init (add-hook 'org-mode-hook #'toc-org-enable))
 #+END_SRC

** Post Initialization

 Lower the GC thresholds back down to a sane level.

 #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold 16777216
	 gc-cons-percentage 0.1)
 #+END_SRC
